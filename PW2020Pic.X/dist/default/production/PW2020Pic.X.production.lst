

Microchip MPLAB XC8 Assembler V2.10 build 88905656 
                                                                                               Wed Jul 08 19:14:20 2020

Microchip MPLAB XC8 C Compiler v2.10 (Free license) build 20190730164152 Og1 
     1                           	processor	16F877A
     2                           	opt	pw 120
     3                           	opt	flic
     4                           	psect	idataBANK0,global,class=CODE,delta=2
     5                           	psect	strings,global,class=STRING,delta=2
     6                           	psect	cinit,global,class=CODE,merge=1,delta=2
     7                           	psect	bssCOMMON,global,class=COMMON,space=1,delta=1
     8                           	psect	bssBANK0,global,class=BANK0,space=1,delta=1
     9                           	psect	dataBANK0,global,class=BANK0,space=1,delta=1
    10                           	psect	inittext,global,class=CODE,delta=2
    11                           	psect	clrtext,global,class=CODE,delta=2
    12                           	psect	cstackCOMMON,global,class=COMMON,space=1,delta=1
    13                           	psect	cstackBANK0,global,class=BANK0,space=1,delta=1
    14                           	psect	maintext,global,class=CODE,split=1,delta=2
    15                           	psect	text1,local,class=CODE,merge=1,delta=2
    16                           	psect	text2,local,class=CODE,merge=1,delta=2
    17                           	psect	text3,local,class=CODE,merge=1,delta=2
    18                           	psect	text4,local,class=CODE,merge=1,delta=2
    19                           	psect	text5,local,class=CODE,merge=1,delta=2
    20                           	psect	text6,local,class=CODE,merge=1,delta=2
    21                           	psect	text7,local,class=CODE,merge=1,delta=2,group=1
    22                           	psect	text8,local,class=CODE,merge=1,delta=2
    23                           	psect	intentry,global,class=CODE,delta=2
    24                           	dabs	1,0x7E,2
    25  0000                     
    26                           ; Version 2.10
    27                           ; Generated 31/07/2019 GMT
    28                           ; 
    29                           ; Copyright Â© 2019, Microchip Technology Inc. and its subsidiaries ("Microchip")
    30                           ; All rights reserved.
    31                           ; 
    32                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    33                           ; 
    34                           ; Redistribution and use in source and binary forms, with or without modification, are
    35                           ; permitted provided that the following conditions are met:
    36                           ; 
    37                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    38                           ;        conditions and the following disclaimer.
    39                           ; 
    40                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    41                           ;        of conditions and the following disclaimer in the documentation and/or other
    42                           ;        materials provided with the distribution.
    43                           ; 
    44                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    45                           ;        software without specific prior written permission.
    46                           ; 
    47                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    48                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    49                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    50                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    51                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    52                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    53                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    54                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    55                           ; 
    56                           ; 
    57                           ; Code-generator required, PIC16F877A Definitions
    58                           ; 
    59                           ; SFR Addresses
    60  0000                     	;# 
    61  0001                     	;# 
    62  0002                     	;# 
    63  0003                     	;# 
    64  0004                     	;# 
    65  0005                     	;# 
    66  0006                     	;# 
    67  0007                     	;# 
    68  0008                     	;# 
    69  0009                     	;# 
    70  000A                     	;# 
    71  000B                     	;# 
    72  000C                     	;# 
    73  000D                     	;# 
    74  000E                     	;# 
    75  000E                     	;# 
    76  000F                     	;# 
    77  0010                     	;# 
    78  0011                     	;# 
    79  0012                     	;# 
    80  0013                     	;# 
    81  0014                     	;# 
    82  0015                     	;# 
    83  0015                     	;# 
    84  0016                     	;# 
    85  0017                     	;# 
    86  0018                     	;# 
    87  0019                     	;# 
    88  001A                     	;# 
    89  001B                     	;# 
    90  001B                     	;# 
    91  001C                     	;# 
    92  001D                     	;# 
    93  001E                     	;# 
    94  001F                     	;# 
    95  0081                     	;# 
    96  0085                     	;# 
    97  0086                     	;# 
    98  0087                     	;# 
    99  0088                     	;# 
   100  0089                     	;# 
   101  008C                     	;# 
   102  008D                     	;# 
   103  008E                     	;# 
   104  0091                     	;# 
   105  0092                     	;# 
   106  0093                     	;# 
   107  0094                     	;# 
   108  0098                     	;# 
   109  0099                     	;# 
   110  009C                     	;# 
   111  009D                     	;# 
   112  009E                     	;# 
   113  009F                     	;# 
   114  010C                     	;# 
   115  010D                     	;# 
   116  010E                     	;# 
   117  010F                     	;# 
   118  018C                     	;# 
   119  018D                     	;# 
   120  0000                     	;# 
   121  0001                     	;# 
   122  0002                     	;# 
   123  0003                     	;# 
   124  0004                     	;# 
   125  0005                     	;# 
   126  0006                     	;# 
   127  0007                     	;# 
   128  0008                     	;# 
   129  0009                     	;# 
   130  000A                     	;# 
   131  000B                     	;# 
   132  000C                     	;# 
   133  000D                     	;# 
   134  000E                     	;# 
   135  000E                     	;# 
   136  000F                     	;# 
   137  0010                     	;# 
   138  0011                     	;# 
   139  0012                     	;# 
   140  0013                     	;# 
   141  0014                     	;# 
   142  0015                     	;# 
   143  0015                     	;# 
   144  0016                     	;# 
   145  0017                     	;# 
   146  0018                     	;# 
   147  0019                     	;# 
   148  001A                     	;# 
   149  001B                     	;# 
   150  001B                     	;# 
   151  001C                     	;# 
   152  001D                     	;# 
   153  001E                     	;# 
   154  001F                     	;# 
   155  0081                     	;# 
   156  0085                     	;# 
   157  0086                     	;# 
   158  0087                     	;# 
   159  0088                     	;# 
   160  0089                     	;# 
   161  008C                     	;# 
   162  008D                     	;# 
   163  008E                     	;# 
   164  0091                     	;# 
   165  0092                     	;# 
   166  0093                     	;# 
   167  0094                     	;# 
   168  0098                     	;# 
   169  0099                     	;# 
   170  009C                     	;# 
   171  009D                     	;# 
   172  009E                     	;# 
   173  009F                     	;# 
   174  010C                     	;# 
   175  010D                     	;# 
   176  010E                     	;# 
   177  010F                     	;# 
   178  018C                     	;# 
   179  018D                     	;# 
   180                           
   181                           	psect	idataBANK0
   182  0366                     __pidataBANK0:	
   183                           
   184                           ;initializer for num_converter@F903
   185  0366  3420               	retlw	32
   186  0367  3420               	retlw	32
   187  0368  3420               	retlw	32
   188  0369  3420               	retlw	32
   189                           
   190                           ;initializer for _temporizzazioneSemaforo
   191  036A  3414               	retlw	20
   192  036B  3400               	retlw	0
   193                           
   194                           ;initializer for _PicId
   195  036C  34A7               	retlw	167
   196  036D  3400               	retlw	0
   197                           
   198                           ;initializer for _numStrade
   199  036E  3404               	retlw	4
   200  0019                     _TXREG	set	25
   201  000B                     _INTCONbits	set	11
   202  0018                     _RCSTAbits	set	24
   203  0008                     _PORTD	set	8
   204  0009                     _PORTEbits	set	9
   205  001E                     _ADRESH	set	30
   206  001F                     _ADCON0bits	set	31
   207  001F                     _ADCON0	set	31
   208  0001                     _TMR0	set	1
   209  000B                     _INTCON	set	11
   210  001A                     _RCREG	set	26
   211  0006                     _PORTBbits	set	6
   212  0064                     _TXIF	set	100
   213  00FA                     _GO_nDONE	set	250
   214  0065                     _RCIF	set	101
   215  008C                     _PIE1bits	set	140
   216  0099                     _SPBRG	set	153
   217  0098                     _TXSTAbits	set	152
   218  0087                     _TRISCbits	set	135
   219  009E                     _ADRESL	set	158
   220  009F                     _ADCON1	set	159
   221  0085                     _TRISA	set	133
   222  0081                     _OPTION_REG	set	129
   223  0089                     _TRISE	set	137
   224  0086                     _TRISB	set	134
   225  0088                     _TRISD	set	136
   226                           
   227                           	psect	strings
   228  036F                     __pstrings:	
   229  036F                     stringtab:	
   230  036F                     __stringtab:	
   231  036F                     stringcode:	
   232                           ;	String table - string pointers are 1 byte each
   233                           
   234  036F                     stringdir:	
   235  036F  3003               	movlw	high stringdir
   236  0370  008A               	movwf	10
   237  0371  0804               	movf	4,w
   238  0372  0A84               	incf	4,f
   239  0373  0782               	addwf	2,f
   240  0374                     __stringbase:	
   241  0374  3400               	retlw	0
   242  0375                     __end_of__stringtab:	
   243  0375                     STR_1:	
   244  0375  3452               	retlw	82	;'R'
   245  0376  3400               	retlw	0
   246                           
   247                           ; #config settings
   248  0000                     
   249                           	psect	cinit
   250  000F                     start_initialization:	
   251  000F                     __initialization:	
   252                           
   253                           ; Initialize objects allocated to BANK0
   254  000F  1383               	bcf	3,7	;select IRP bank0
   255  0010  304D               	movlw	low (__pdataBANK0+9)
   256  0011  00FD               	movwf	btemp+-1
   257  0012  3003               	movlw	high __pidataBANK0
   258  0013  00FE               	movwf	btemp
   259  0014  3066               	movlw	low __pidataBANK0
   260  0015  00FF               	movwf	btemp+1
   261  0016  3044               	movlw	low __pdataBANK0
   262  0017  0084               	movwf	4
   263  0018  120A  118A  233D  120A  118A  	fcall	init_ram0
   264                           
   265                           ; Clear objects allocated to BANK0
   266  001D  3020               	movlw	low __pbssBANK0
   267  001E  0084               	movwf	4
   268  001F  3033               	movlw	low (__pbssBANK0+19)
   269  0020  120A  118A  2377  120A  118A  	fcall	clear_ram0
   270                           
   271                           ; Clear objects allocated to COMMON
   272  0025  01F8               	clrf	__pbssCOMMON& (0+127)
   273  0026  01F9               	clrf	(__pbssCOMMON+1)& (0+127)
   274  0027  01FA               	clrf	(__pbssCOMMON+2)& (0+127)
   275  0028                     end_of_initialization:	
   276                           ;End of C runtime variable initialization code
   277                           
   278  0028                     __end_of__initialization:	
   279  0028  0183               	clrf	3
   280  0029  120A  118A  282C   	ljmp	_main	;jump to C main() function
   281                           
   282                           	psect	bssCOMMON
   283  0078                     __pbssCOMMON:	
   284  0078                     _oldBtn3:	
   285  0078                     	ds	1
   286  0079                     _oldBtn2:	
   287  0079                     	ds	1
   288  007A                     _oldBtn1:	
   289  007A                     	ds	1
   290                           
   291                           	psect	bssBANK0
   292  0020                     __pbssBANK0:	
   293  0020                     _count:	
   294  0020                     	ds	2
   295  0022                     _scattoSemafori:	
   296  0022                     	ds	1
   297  0023                     _stat3:	
   298  0023                     	ds	1
   299  0024                     _stat2:	
   300  0024                     	ds	1
   301  0025                     _stat1:	
   302  0025                     	ds	1
   303  0026                     _contCamion:	
   304  0026                     	ds	1
   305  0027                     _contMoto:	
   306  0027                     	ds	1
   307  0028                     _contAuto:	
   308  0028                     	ds	1
   309  0029                     _datoSeriale:	
   310  0029                     	ds	1
   311  002A                     _received:	
   312  002A                     	ds	1
   313  002B                     _strToSend:	
   314  002B                     	ds	8
   315                           
   316                           	psect	dataBANK0
   317  0044                     __pdataBANK0:	
   318  0044                     num_converter@F903:	
   319  0044                     	ds	4
   320  0048                     _temporizzazioneSemaforo:	
   321  0048                     	ds	2
   322  004A                     _PicId:	
   323  004A                     	ds	2
   324  004C                     _numStrade:	
   325  004C                     	ds	1
   326                           
   327                           	psect	inittext
   328  0339                     init_fetch0:	
   329                           ;	Called with low address in FSR and high address in W
   330                           
   331  0339  087E               	movf	btemp,w
   332  033A  008A               	movwf	10
   333  033B  087F               	movf	btemp+1,w
   334  033C  0082               	movwf	2
   335  033D                     init_ram0:	
   336                           ;Called with:
   337                           ;	high address of idata address in btemp 
   338                           ;	low address of idata address in btemp+1 
   339                           ;	low address of data in FSR
   340                           ;	high address + 1 of data in btemp-1
   341                           
   342  033D  120A  118A  2339  120A  118A  	fcall	init_fetch0
   343  0342  0080               	movwf	0
   344  0343  0A84               	incf	4,f
   345  0344  0804               	movf	4,w
   346  0345  067D               	xorwf	btemp+-1,w
   347  0346  1903               	btfsc	3,2
   348  0347  3400               	retlw	0
   349  0348  0AFF               	incf	btemp+1,f
   350  0349  1903               	btfsc	3,2
   351  034A  0AFE               	incf	btemp,f
   352  034B  2B3D               	goto	init_ram0
   353                           
   354                           	psect	clrtext
   355  0377                     clear_ram0:	
   356                           ;	Called with FSR containing the base address, and
   357                           ;	W with the last address+1
   358                           
   359  0377  0064               	clrwdt	;clear the watchdog before getting into this loop
   360  0378                     clrloop0:	
   361  0378  0180               	clrf	0	;clear RAM location pointed to by FSR
   362  0379  0A84               	incf	4,f	;increment pointer
   363  037A  0604               	xorwf	4,w	;XOR with final address
   364  037B  1903               	btfsc	3,2	;have we reached the end yet?
   365  037C  3400               	retlw	0	;all done for this memory range, return
   366  037D  0604               	xorwf	4,w	;XOR again to restore value
   367  037E  2B78               	goto	clrloop0	;do the next byte
   368                           
   369                           	psect	cstackCOMMON
   370  0070                     __pcstackCOMMON:	
   371  0070                     ?_initPic:	
   372  0070                     ?_init_lcd:	
   373                           ; 1 bytes @ 0x0
   374                           
   375  0070                     ?_send_cmd:	
   376                           ; 1 bytes @ 0x0
   377                           
   378  0070                     ?_Uart_send_string:	
   379                           ; 1 bytes @ 0x0
   380                           
   381  0070                     ?_UART_TxChar:	
   382                           ; 1 bytes @ 0x0
   383                           
   384  0070                     ?_main:	
   385                           ; 1 bytes @ 0x0
   386                           
   387  0070                     ?_ISR:	
   388                           ; 1 bytes @ 0x0
   389                           
   390  0070                     ??_ISR:	
   391                           ; 1 bytes @ 0x0
   392                           
   393                           
   394                           ; 1 bytes @ 0x0
   395  0070                     	ds	3
   396  0073                     ??_initPic:	
   397  0073                     ??_send_cmd:	
   398                           ; 1 bytes @ 0x3
   399                           
   400  0073                     ??_UART_TxChar:	
   401                           ; 1 bytes @ 0x3
   402                           
   403  0073                     ??___aldiv:	
   404                           ; 1 bytes @ 0x3
   405                           
   406  0073                     UART_TxChar@dato:	
   407                           ; 1 bytes @ 0x3
   408                           
   409                           
   410                           ; 1 bytes @ 0x3
   411  0073                     	ds	1
   412  0074                     ??_UART_init:	
   413  0074                     ??_Uart_send_string:	
   414                           ; 1 bytes @ 0x4
   415                           
   416                           
   417                           ; 1 bytes @ 0x4
   418  0074                     	ds	1
   419  0075                     Uart_send_string@i:	
   420  0075                     send_cmd@command:	
   421                           ; 1 bytes @ 0x5
   422                           
   423                           
   424                           ; 1 bytes @ 0x5
   425  0075                     	ds	1
   426  0076                     ??_init_lcd:	
   427  0076                     Uart_send_string@str:	
   428                           ; 1 bytes @ 0x6
   429                           
   430                           
   431                           ; 1 bytes @ 0x6
   432  0076                     	ds	2
   433                           
   434                           	psect	cstackBANK0
   435  0033                     __pcstackBANK0:	
   436  0033                     ?___aldiv:	
   437  0033                     ___aldiv@divisor:	
   438                           ; 4 bytes @ 0x0
   439                           
   440                           
   441                           ; 4 bytes @ 0x0
   442  0033                     	ds	4
   443  0037                     ___aldiv@dividend:	
   444                           
   445                           ; 4 bytes @ 0x4
   446  0037                     	ds	4
   447  003B                     ___aldiv@counter:	
   448                           
   449                           ; 1 bytes @ 0x8
   450  003B                     	ds	1
   451  003C                     ___aldiv@sign:	
   452                           
   453                           ; 1 bytes @ 0x9
   454  003C                     	ds	1
   455  003D                     ___aldiv@quotient:	
   456                           
   457                           ; 4 bytes @ 0xA
   458  003D                     	ds	4
   459  0041                     ?_UART_init:	
   460  0041                     UART_init@baudrate:	
   461                           ; 1 bytes @ 0xE
   462                           
   463                           
   464                           ; 2 bytes @ 0xE
   465  0041                     	ds	2
   466  0043                     ??_main:	
   467                           
   468                           ; 1 bytes @ 0x10
   469  0043                     	ds	1
   470                           
   471                           	psect	maintext
   472  002C                     __pmaintext:	
   473 ;;
   474 ;;Main: autosize = 0, tempsize = 1, incstack = 0, save=0
   475 ;;
   476 ;; *************** function _main *****************
   477 ;; Defined at:
   478 ;;		line 102 in file "main.c"
   479 ;; Parameters:    Size  Location     Type
   480 ;;		None
   481 ;; Auto vars:     Size  Location     Type
   482 ;;  stringa         1    0        unsigned char 
   483 ;;  i               1    0        unsigned char 
   484 ;; Return value:  Size  Location     Type
   485 ;;                  1    wreg      void 
   486 ;; Registers used:
   487 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
   488 ;; Tracked objects:
   489 ;;		On entry : B00/0
   490 ;;		On exit  : 0/0
   491 ;;		Unchanged: 0/0
   492 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   493 ;;      Params:         0       0       0       0       0
   494 ;;      Locals:         0       1       0       0       0
   495 ;;      Temps:          0       1       0       0       0
   496 ;;      Totals:         0       2       0       0       0
   497 ;;Total ram usage:        2 bytes
   498 ;; Hardware stack levels required when called:    3
   499 ;; This function calls:
   500 ;;		_UART_TxChar
   501 ;;		_UART_init
   502 ;;		_Uart_send_string
   503 ;;		_initPic
   504 ;;		_init_lcd
   505 ;;		_send_cmd
   506 ;; This function is called by:
   507 ;;		Startup code after reset
   508 ;; This function uses a non-reentrant model
   509 ;;
   510                           
   511                           
   512                           ;psect for function _main
   513  002C                     _main:	
   514  002C                     l1562:	
   515                           ;incstack = 0
   516                           ; Regs used in _main: [wreg-fsr0h+status,2+status,0+pclath+cstack]
   517                           
   518                           
   519                           ;main.c: 104:     initPic();
   520  002C  120A  118A  234C  120A  118A  	fcall	_initPic
   521                           
   522                           ;main.c: 105:     UART_init(9600);
   523  0031  3080               	movlw	128
   524  0032  1283               	bcf	3,5	;RP0=0, select bank0
   525  0033  1303               	bcf	3,6	;RP1=0, select bank0
   526  0034  00C1               	movwf	UART_init@baudrate
   527  0035  3025               	movlw	37
   528  0036  00C2               	movwf	UART_init@baudrate+1
   529  0037  120A  118A  22C6  120A  118A  	fcall	_UART_init
   530                           
   531                           ;main.c: 106:     init_lcd();
   532  003C  120A  118A  2273  120A  118A  	fcall	_init_lcd
   533                           
   534                           ;main.c: 107:     send_cmd(0x01);
   535  0041  3001               	movlw	1
   536  0042  120A  118A  2300  120A  118A  	fcall	_send_cmd
   537  0047                     l1564:	
   538                           
   539                           ;main.c: 112:     strToSend[0]=2;
   540  0047  3002               	movlw	2
   541  0048  1283               	bcf	3,5	;RP0=0, select bank0
   542  0049  1303               	bcf	3,6	;RP1=0, select bank0
   543  004A  00C3               	movwf	??_main
   544  004B  0843               	movf	??_main,w
   545  004C  00AB               	movwf	_strToSend
   546  004D                     l1566:	
   547                           
   548                           ;main.c: 113:     strToSend[1]=200;
   549  004D  30C8               	movlw	200
   550  004E  00C3               	movwf	??_main
   551  004F  0843               	movf	??_main,w
   552  0050  00AC               	movwf	_strToSend+1
   553  0051                     l1568:	
   554                           
   555                           ;main.c: 114:     strToSend[2]=5;
   556  0051  3005               	movlw	5
   557  0052  00C3               	movwf	??_main
   558  0053  0843               	movf	??_main,w
   559  0054  00AD               	movwf	_strToSend+2
   560  0055                     l1570:	
   561                           
   562                           ;main.c: 115:     strToSend[3]=0;
   563  0055  01AE               	clrf	_strToSend+3
   564  0056                     l1572:	
   565                           
   566                           ;main.c: 116:     strToSend[4]=0;
   567  0056  01AF               	clrf	_strToSend+4
   568  0057                     l1574:	
   569                           
   570                           ;main.c: 117:     strToSend[5]=35;
   571  0057  3023               	movlw	35
   572  0058  00C3               	movwf	??_main
   573  0059  0843               	movf	??_main,w
   574  005A  00B0               	movwf	_strToSend+5
   575  005B                     l1576:	
   576                           
   577                           ;main.c: 118:     Uart_send_string(strToSend);
   578  005B  302B               	movlw	(low (_strToSend| 0))& (0+255)
   579  005C  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   580  0061                     l1578:	
   581                           
   582                           ;main.c: 121:     strToSend[0]=2;
   583  0061  3002               	movlw	2
   584  0062  1283               	bcf	3,5	;RP0=0, select bank0
   585  0063  1303               	bcf	3,6	;RP1=0, select bank0
   586  0064  00C3               	movwf	??_main
   587  0065  0843               	movf	??_main,w
   588  0066  00AB               	movwf	_strToSend
   589  0067                     l1580:	
   590                           
   591                           ;main.c: 122:     strToSend[1]=200;
   592  0067  30C8               	movlw	200
   593  0068  00C3               	movwf	??_main
   594  0069  0843               	movf	??_main,w
   595  006A  00AC               	movwf	_strToSend+1
   596  006B                     l1582:	
   597                           
   598                           ;main.c: 123:     strToSend[2]=5;
   599  006B  3005               	movlw	5
   600  006C  00C3               	movwf	??_main
   601  006D  0843               	movf	??_main,w
   602  006E  00AD               	movwf	_strToSend+2
   603  006F                     l1584:	
   604                           
   605                           ;main.c: 124:     strToSend[3]=2;
   606  006F  3002               	movlw	2
   607  0070  00C3               	movwf	??_main
   608  0071  0843               	movf	??_main,w
   609  0072  00AE               	movwf	_strToSend+3
   610  0073                     l1586:	
   611                           
   612                           ;main.c: 125:     strToSend[4]=1;
   613  0073  01AF               	clrf	_strToSend+4
   614  0074  0AAF               	incf	_strToSend+4,f
   615  0075                     l1588:	
   616                           
   617                           ;main.c: 126:     strToSend[5]=50;
   618  0075  3032               	movlw	50
   619  0076  00C3               	movwf	??_main
   620  0077  0843               	movf	??_main,w
   621  0078  00B0               	movwf	_strToSend+5
   622  0079                     l1590:	
   623                           
   624                           ;main.c: 127:     Uart_send_string(strToSend);
   625  0079  302B               	movlw	(low (_strToSend| 0))& (0+255)
   626  007A  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   627  007F                     l1592:	
   628                           
   629                           ;main.c: 129:     strToSend[0]=2;
   630  007F  3002               	movlw	2
   631  0080  1283               	bcf	3,5	;RP0=0, select bank0
   632  0081  1303               	bcf	3,6	;RP1=0, select bank0
   633  0082  00C3               	movwf	??_main
   634  0083  0843               	movf	??_main,w
   635  0084  00AB               	movwf	_strToSend
   636  0085                     l1594:	
   637                           
   638                           ;main.c: 130:     strToSend[1]=200;
   639  0085  30C8               	movlw	200
   640  0086  00C3               	movwf	??_main
   641  0087  0843               	movf	??_main,w
   642  0088  00AC               	movwf	_strToSend+1
   643  0089                     l1596:	
   644                           
   645                           ;main.c: 131:     strToSend[2]=5;
   646  0089  3005               	movlw	5
   647  008A  00C3               	movwf	??_main
   648  008B  0843               	movf	??_main,w
   649  008C  00AD               	movwf	_strToSend+2
   650  008D                     l1598:	
   651                           
   652                           ;main.c: 132:     strToSend[3]=4;
   653  008D  3004               	movlw	4
   654  008E  00C3               	movwf	??_main
   655  008F  0843               	movf	??_main,w
   656  0090  00AE               	movwf	_strToSend+3
   657  0091                     l1600:	
   658                           
   659                           ;main.c: 133:     strToSend[4]=2;
   660  0091  3002               	movlw	2
   661  0092  00C3               	movwf	??_main
   662  0093  0843               	movf	??_main,w
   663  0094  00AF               	movwf	_strToSend+4
   664  0095                     l1602:	
   665                           
   666                           ;main.c: 134:     strToSend[5]=1;
   667  0095  01B0               	clrf	_strToSend+5
   668  0096  0AB0               	incf	_strToSend+5,f
   669  0097                     l1604:	
   670                           
   671                           ;main.c: 135:     Uart_send_string(strToSend);
   672  0097  302B               	movlw	(low (_strToSend| 0))& (0+255)
   673  0098  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   674  009D                     l1606:	
   675                           
   676                           ;main.c: 137:     strToSend[0]=2;
   677  009D  3002               	movlw	2
   678  009E  1283               	bcf	3,5	;RP0=0, select bank0
   679  009F  1303               	bcf	3,6	;RP1=0, select bank0
   680  00A0  00C3               	movwf	??_main
   681  00A1  0843               	movf	??_main,w
   682  00A2  00AB               	movwf	_strToSend
   683  00A3                     l1608:	
   684                           
   685                           ;main.c: 138:     strToSend[1]=200;
   686  00A3  30C8               	movlw	200
   687  00A4  00C3               	movwf	??_main
   688  00A5  0843               	movf	??_main,w
   689  00A6  00AC               	movwf	_strToSend+1
   690  00A7                     l1610:	
   691                           
   692                           ;main.c: 139:     strToSend[2]=5;
   693  00A7  3005               	movlw	5
   694  00A8  00C3               	movwf	??_main
   695  00A9  0843               	movf	??_main,w
   696  00AA  00AD               	movwf	_strToSend+2
   697  00AB                     l1612:	
   698                           
   699                           ;main.c: 140:     strToSend[3]=0;
   700  00AB  01AE               	clrf	_strToSend+3
   701  00AC                     l1614:	
   702                           
   703                           ;main.c: 141:     strToSend[4]=4;
   704  00AC  3004               	movlw	4
   705  00AD  00C3               	movwf	??_main
   706  00AE  0843               	movf	??_main,w
   707  00AF  00AF               	movwf	_strToSend+4
   708  00B0                     l1616:	
   709                           
   710                           ;main.c: 142:     strToSend[5]="R";
   711  00B0  3001               	movlw	(low ((STR_1-__stringbase)| (0+32768)))& (0+255)
   712  00B1  00C3               	movwf	??_main
   713  00B2  0843               	movf	??_main,w
   714  00B3  00B0               	movwf	_strToSend+5
   715  00B4                     l1618:	
   716                           
   717                           ;main.c: 143:     Uart_send_string(strToSend);
   718  00B4  302B               	movlw	(low (_strToSend| 0))& (0+255)
   719  00B5  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   720  00BA                     l1620:	
   721                           
   722                           ;main.c: 145:     strToSend[0]=2;
   723  00BA  3002               	movlw	2
   724  00BB  1283               	bcf	3,5	;RP0=0, select bank0
   725  00BC  1303               	bcf	3,6	;RP1=0, select bank0
   726  00BD  00C3               	movwf	??_main
   727  00BE  0843               	movf	??_main,w
   728  00BF  00AB               	movwf	_strToSend
   729  00C0                     l1622:	
   730                           
   731                           ;main.c: 146:     strToSend[1]=200;
   732  00C0  30C8               	movlw	200
   733  00C1  00C3               	movwf	??_main
   734  00C2  0843               	movf	??_main,w
   735  00C3  00AC               	movwf	_strToSend+1
   736  00C4                     l1624:	
   737                           
   738                           ;main.c: 147:     strToSend[2]=5;
   739  00C4  3005               	movlw	5
   740  00C5  00C3               	movwf	??_main
   741  00C6  0843               	movf	??_main,w
   742  00C7  00AD               	movwf	_strToSend+2
   743  00C8                     l1626:	
   744                           
   745                           ;main.c: 148:     strToSend[3]=0;
   746  00C8  01AE               	clrf	_strToSend+3
   747  00C9                     l1628:	
   748                           
   749                           ;main.c: 149:     strToSend[4]=5;
   750  00C9  3005               	movlw	5
   751  00CA  00C3               	movwf	??_main
   752  00CB  0843               	movf	??_main,w
   753  00CC  00AF               	movwf	_strToSend+4
   754  00CD                     l1630:	
   755                           
   756                           ;main.c: 150:     strToSend[5]=5;
   757  00CD  3005               	movlw	5
   758  00CE  00C3               	movwf	??_main
   759  00CF  0843               	movf	??_main,w
   760  00D0  00B0               	movwf	_strToSend+5
   761  00D1                     l1632:	
   762                           
   763                           ;main.c: 151:     Uart_send_string(strToSend);
   764  00D1  302B               	movlw	(low (_strToSend| 0))& (0+255)
   765  00D2  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   766  00D7                     l1634:	
   767                           
   768                           ;main.c: 153:     strToSend[0]=2;
   769  00D7  3002               	movlw	2
   770  00D8  1283               	bcf	3,5	;RP0=0, select bank0
   771  00D9  1303               	bcf	3,6	;RP1=0, select bank0
   772  00DA  00C3               	movwf	??_main
   773  00DB  0843               	movf	??_main,w
   774  00DC  00AB               	movwf	_strToSend
   775  00DD                     l1636:	
   776                           
   777                           ;main.c: 154:     strToSend[1]=200;
   778  00DD  30C8               	movlw	200
   779  00DE  00C3               	movwf	??_main
   780  00DF  0843               	movf	??_main,w
   781  00E0  00AC               	movwf	_strToSend+1
   782  00E1                     l1638:	
   783                           
   784                           ;main.c: 155:     strToSend[2]=5;
   785  00E1  3005               	movlw	5
   786  00E2  00C3               	movwf	??_main
   787  00E3  0843               	movf	??_main,w
   788  00E4  00AD               	movwf	_strToSend+2
   789  00E5                     l1640:	
   790                           
   791                           ;main.c: 156:     strToSend[3]=2;
   792  00E5  3002               	movlw	2
   793  00E6  00C3               	movwf	??_main
   794  00E7  0843               	movf	??_main,w
   795  00E8  00AE               	movwf	_strToSend+3
   796  00E9                     l1642:	
   797                           
   798                           ;main.c: 157:     strToSend[4]=6;
   799  00E9  3006               	movlw	6
   800  00EA  00C3               	movwf	??_main
   801  00EB  0843               	movf	??_main,w
   802  00EC  00AF               	movwf	_strToSend+4
   803  00ED                     l1644:	
   804                           
   805                           ;main.c: 158:     strToSend[5]=4;
   806  00ED  3004               	movlw	4
   807  00EE  00C3               	movwf	??_main
   808  00EF  0843               	movf	??_main,w
   809  00F0  00B0               	movwf	_strToSend+5
   810  00F1                     l1646:	
   811                           
   812                           ;main.c: 159:     Uart_send_string(strToSend);
   813  00F1  302B               	movlw	(low (_strToSend| 0))& (0+255)
   814  00F2  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   815  00F7                     l1648:	
   816                           
   817                           ;main.c: 161:     strToSend[0]=2;
   818  00F7  3002               	movlw	2
   819  00F8  1283               	bcf	3,5	;RP0=0, select bank0
   820  00F9  1303               	bcf	3,6	;RP1=0, select bank0
   821  00FA  00C3               	movwf	??_main
   822  00FB  0843               	movf	??_main,w
   823  00FC  00AB               	movwf	_strToSend
   824  00FD                     l1650:	
   825                           
   826                           ;main.c: 162:     strToSend[1]=200;
   827  00FD  30C8               	movlw	200
   828  00FE  00C3               	movwf	??_main
   829  00FF  0843               	movf	??_main,w
   830  0100  00AC               	movwf	_strToSend+1
   831  0101                     l1652:	
   832                           
   833                           ;main.c: 163:     strToSend[2]=5;
   834  0101  3005               	movlw	5
   835  0102  00C3               	movwf	??_main
   836  0103  0843               	movf	??_main,w
   837  0104  00AD               	movwf	_strToSend+2
   838  0105                     l1654:	
   839                           
   840                           ;main.c: 164:     strToSend[3]=3;
   841  0105  3003               	movlw	3
   842  0106  00C3               	movwf	??_main
   843  0107  0843               	movf	??_main,w
   844  0108  00AE               	movwf	_strToSend+3
   845  0109                     l1656:	
   846                           
   847                           ;main.c: 165:     strToSend[4]=7;
   848  0109  3007               	movlw	7
   849  010A  00C3               	movwf	??_main
   850  010B  0843               	movf	??_main,w
   851  010C  00AF               	movwf	_strToSend+4
   852  010D                     l1658:	
   853                           
   854                           ;main.c: 166:     strToSend[5]=2;
   855  010D  3002               	movlw	2
   856  010E  00C3               	movwf	??_main
   857  010F  0843               	movf	??_main,w
   858  0110  00B0               	movwf	_strToSend+5
   859  0111                     l1660:	
   860                           
   861                           ;main.c: 167:     Uart_send_string(strToSend);
   862  0111  302B               	movlw	(low (_strToSend| 0))& (0+255)
   863  0112  120A  118A  2320  120A  118A  	fcall	_Uart_send_string
   864  0117                     l1662:	
   865                           
   866                           ;main.c: 191:     {;main.c: 194:         if(stat1)
   867  0117  1283               	bcf	3,5	;RP0=0, select bank0
   868  0118  1303               	bcf	3,6	;RP1=0, select bank0
   869  0119  0825               	movf	_stat1,w
   870  011A  1903               	btfsc	3,2
   871  011B  291D               	goto	u1081
   872  011C  291E               	goto	u1080
   873  011D                     u1081:	
   874  011D  2929               	goto	l1670
   875  011E                     u1080:	
   876  011E                     l1664:	
   877                           
   878                           ;main.c: 195:         {;main.c: 196:             contAuto++;
   879  011E  3001               	movlw	1
   880  011F  00C3               	movwf	??_main
   881  0120  0843               	movf	??_main,w
   882  0121  07A8               	addwf	_contAuto,f
   883  0122                     l1666:	
   884                           
   885                           ;main.c: 197:             stat1=0;
   886  0122  01A5               	clrf	_stat1
   887  0123                     l1668:	
   888                           
   889                           ;main.c: 198:             UART_TxChar(contAuto);
   890  0123  0828               	movf	_contAuto,w
   891  0124  120A  118A  235B  120A  118A  	fcall	_UART_TxChar
   892  0129                     l1670:	
   893                           
   894                           ;main.c: 200:         if(stat2)
   895  0129  1283               	bcf	3,5	;RP0=0, select bank0
   896  012A  1303               	bcf	3,6	;RP1=0, select bank0
   897  012B  0824               	movf	_stat2,w
   898  012C  1903               	btfsc	3,2
   899  012D  292F               	goto	u1091
   900  012E  2930               	goto	u1090
   901  012F                     u1091:	
   902  012F  2935               	goto	l1676
   903  0130                     u1090:	
   904  0130                     l1672:	
   905                           
   906                           ;main.c: 201:         {;main.c: 202:             contMoto++;
   907  0130  3001               	movlw	1
   908  0131  00C3               	movwf	??_main
   909  0132  0843               	movf	??_main,w
   910  0133  07A7               	addwf	_contMoto,f
   911  0134                     l1674:	
   912                           
   913                           ;main.c: 203:             stat2=0;
   914  0134  01A4               	clrf	_stat2
   915  0135                     l1676:	
   916                           
   917                           ;main.c: 205:         if(stat3)
   918  0135  0823               	movf	_stat3,w
   919  0136  1903               	btfsc	3,2
   920  0137  2939               	goto	u1101
   921  0138  293A               	goto	u1100
   922  0139                     u1101:	
   923  0139  293F               	goto	l1682
   924  013A                     u1100:	
   925  013A                     l1678:	
   926                           
   927                           ;main.c: 206:         {;main.c: 207:             contCamion++;
   928  013A  3001               	movlw	1
   929  013B  00C3               	movwf	??_main
   930  013C  0843               	movf	??_main,w
   931  013D  07A6               	addwf	_contCamion,f
   932  013E                     l1680:	
   933                           
   934                           ;main.c: 208:             stat3=0;
   935  013E  01A3               	clrf	_stat3
   936  013F                     l1682:	
   937                           
   938                           ;main.c: 258:         if(scattoSemafori==1)
   939  013F  0322               	decf	_scattoSemafori,w
   940  0140  1D03               	btfss	3,2
   941  0141  2943               	goto	u1111
   942  0142  2944               	goto	u1110
   943  0143                     u1111:	
   944  0143  2945               	goto	l1686
   945  0144                     u1110:	
   946  0144                     l1684:	
   947                           
   948                           ;main.c: 259:         {;main.c: 263:             scattoSemafori=0;
   949  0144  01A2               	clrf	_scattoSemafori
   950  0145                     l1686:	
   951                           
   952                           ;main.c: 268:         if(received)
   953  0145  082A               	movf	_received,w
   954  0146  1903               	btfsc	3,2
   955  0147  2949               	goto	u1121
   956  0148  294A               	goto	u1120
   957  0149                     u1121:	
   958  0149  2917               	goto	l1662
   959  014A                     u1120:	
   960  014A                     l1688:	
   961  014A                     l1690:	
   962                           
   963                           ;main.c: 272:             send_cmd(0x01);
   964  014A  3001               	movlw	1
   965  014B  120A  118A  2300  120A  118A  	fcall	_send_cmd
   966  0150                     l1692:	
   967                           
   968                           ;main.c: 287:             received=0;
   969  0150  1283               	bcf	3,5	;RP0=0, select bank0
   970  0151  1303               	bcf	3,6	;RP1=0, select bank0
   971  0152  01AA               	clrf	_received
   972  0153  2917               	goto	l1662
   973  0154  120A  118A  280C   	ljmp	start
   974  0157                     __end_of_main:	
   975                           
   976                           	psect	text1
   977  0273                     __ptext1:	
   978 ;; *************** function _init_lcd *****************
   979 ;; Defined at:
   980 ;;		line 508 in file "main.c"
   981 ;; Parameters:    Size  Location     Type
   982 ;;		None
   983 ;; Auto vars:     Size  Location     Type
   984 ;;		None
   985 ;; Return value:  Size  Location     Type
   986 ;;                  1    wreg      void 
   987 ;; Registers used:
   988 ;;		wreg, status,2, status,0, pclath, cstack
   989 ;; Tracked objects:
   990 ;;		On entry : 0/0
   991 ;;		On exit  : 0/0
   992 ;;		Unchanged: 0/0
   993 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
   994 ;;      Params:         0       0       0       0       0
   995 ;;      Locals:         0       0       0       0       0
   996 ;;      Temps:          2       0       0       0       0
   997 ;;      Totals:         2       0       0       0       0
   998 ;;Total ram usage:        2 bytes
   999 ;; Hardware stack levels used:    1
  1000 ;; Hardware stack levels required when called:    2
  1001 ;; This function calls:
  1002 ;;		_send_cmd
  1003 ;; This function is called by:
  1004 ;;		_main
  1005 ;; This function uses a non-reentrant model
  1006 ;;
  1007                           
  1008                           
  1009                           ;psect for function _init_lcd
  1010  0273                     _init_lcd:	
  1011  0273                     l1202:	
  1012                           ;incstack = 0
  1013                           ; Regs used in _init_lcd: [wreg+status,2+status,0+pclath+cstack]
  1014                           
  1015                           
  1016                           ;main.c: 510:     PORTEbits.RE2 = 0;
  1017  0273  1283               	bcf	3,5	;RP0=0, select bank0
  1018  0274  1303               	bcf	3,6	;RP1=0, select bank0
  1019  0275  1109               	bcf	9,2	;volatile
  1020                           
  1021                           ;main.c: 511:     PORTEbits.RE1 = 0;
  1022  0276  1089               	bcf	9,1	;volatile
  1023  0277                     l1204:	
  1024                           
  1025                           ;main.c: 512:     _delay((unsigned long)((20)*(32000000L/4000.0)));
  1026  0277  30D0               	movlw	208
  1027  0278  00F7               	movwf	??_init_lcd+1
  1028  0279  30C9               	movlw	201
  1029  027A  00F6               	movwf	??_init_lcd
  1030  027B                     u1137:	
  1031  027B  0BF6               	decfsz	??_init_lcd,f
  1032  027C  2A7B               	goto	u1137
  1033  027D  0BF7               	decfsz	??_init_lcd+1,f
  1034  027E  2A7B               	goto	u1137
  1035  027F  2A80               	nop2
  1036  0280                     l1206:	
  1037                           
  1038                           ;main.c: 513:     PORTEbits.RE1 = 1;
  1039  0280  1283               	bcf	3,5	;RP0=0, select bank0
  1040  0281  1303               	bcf	3,6	;RP1=0, select bank0
  1041  0282  1489               	bsf	9,1	;volatile
  1042  0283                     l1208:	
  1043                           
  1044                           ;main.c: 514:     send_cmd(0x38);
  1045  0283  3038               	movlw	56
  1046  0284  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1047  0289                     l1210:	
  1048                           
  1049                           ;main.c: 515:     _delay((unsigned long)((5)*(32000000L/4000.0)));
  1050  0289  3034               	movlw	52
  1051  028A  00F7               	movwf	??_init_lcd+1
  1052  028B  30F1               	movlw	241
  1053  028C  00F6               	movwf	??_init_lcd
  1054  028D                     u1147:	
  1055  028D  0BF6               	decfsz	??_init_lcd,f
  1056  028E  2A8D               	goto	u1147
  1057  028F  0BF7               	decfsz	??_init_lcd+1,f
  1058  0290  2A8D               	goto	u1147
  1059  0291  2A92               	nop2
  1060                           
  1061                           ;main.c: 516:     send_cmd(0x38);
  1062  0292  3038               	movlw	56
  1063  0293  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1064  0298                     l1212:	
  1065                           
  1066                           ;main.c: 517:     _delay((unsigned long)((1)*(32000000L/4000.0)));
  1067  0298  300B               	movlw	11
  1068  0299  00F7               	movwf	??_init_lcd+1
  1069  029A  3062               	movlw	98
  1070  029B  00F6               	movwf	??_init_lcd
  1071  029C                     u1157:	
  1072  029C  0BF6               	decfsz	??_init_lcd,f
  1073  029D  2A9C               	goto	u1157
  1074  029E  0BF7               	decfsz	??_init_lcd+1,f
  1075  029F  2A9C               	goto	u1157
  1076  02A0  0000               	nop
  1077  02A1                     l1214:	
  1078                           
  1079                           ;main.c: 518:     send_cmd(0x38);
  1080  02A1  3038               	movlw	56
  1081  02A2  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1082  02A7                     l1216:	
  1083                           
  1084                           ;main.c: 519:     send_cmd(0x08);
  1085  02A7  3008               	movlw	8
  1086  02A8  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1087  02AD                     l1218:	
  1088                           
  1089                           ;main.c: 520:     send_cmd(0x0F);
  1090  02AD  300F               	movlw	15
  1091  02AE  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1092  02B3                     l1220:	
  1093                           
  1094                           ;main.c: 521:     send_cmd(0x01);
  1095  02B3  3001               	movlw	1
  1096  02B4  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1097  02B9                     l1222:	
  1098                           
  1099                           ;main.c: 522:     send_cmd(0x0C);
  1100  02B9  300C               	movlw	12
  1101  02BA  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1102  02BF                     l1224:	
  1103                           
  1104                           ;main.c: 523:     send_cmd(0x80);
  1105  02BF  3080               	movlw	128
  1106  02C0  120A  118A  2300  120A  118A  	fcall	_send_cmd
  1107  02C5                     l183:	
  1108  02C5  0008               	return
  1109  02C6                     __end_of_init_lcd:	
  1110                           
  1111                           	psect	text2
  1112  0300                     __ptext2:	
  1113 ;; *************** function _send_cmd *****************
  1114 ;; Defined at:
  1115 ;;		line 496 in file "main.c"
  1116 ;; Parameters:    Size  Location     Type
  1117 ;;  command         1    wreg     unsigned char 
  1118 ;; Auto vars:     Size  Location     Type
  1119 ;;  command         1    5[COMMON] unsigned char 
  1120 ;; Return value:  Size  Location     Type
  1121 ;;                  1    wreg      void 
  1122 ;; Registers used:
  1123 ;;		wreg
  1124 ;; Tracked objects:
  1125 ;;		On entry : 0/0
  1126 ;;		On exit  : 0/0
  1127 ;;		Unchanged: 0/0
  1128 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1129 ;;      Params:         0       0       0       0       0
  1130 ;;      Locals:         1       0       0       0       0
  1131 ;;      Temps:          2       0       0       0       0
  1132 ;;      Totals:         3       0       0       0       0
  1133 ;;Total ram usage:        3 bytes
  1134 ;; Hardware stack levels used:    1
  1135 ;; Hardware stack levels required when called:    1
  1136 ;; This function calls:
  1137 ;;		Nothing
  1138 ;; This function is called by:
  1139 ;;		_main
  1140 ;;		_init_lcd
  1141 ;; This function uses a non-reentrant model
  1142 ;;
  1143                           
  1144                           
  1145                           ;psect for function _send_cmd
  1146  0300                     _send_cmd:	
  1147                           
  1148                           ;incstack = 0
  1149                           ; Regs used in _send_cmd: [wreg]
  1150                           ;send_cmd@command stored from wreg
  1151  0300  00F5               	movwf	send_cmd@command
  1152  0301                     l1132:	
  1153                           
  1154                           ;main.c: 496: void send_cmd(char command);main.c: 497: {;main.c: 498:     PORTEbits.RE1 
      +                          = 1;
  1155  0301  1283               	bcf	3,5	;RP0=0, select bank0
  1156  0302  1303               	bcf	3,6	;RP1=0, select bank0
  1157  0303  1489               	bsf	9,1	;volatile
  1158  0304                     l1134:	
  1159                           
  1160                           ;main.c: 499:     PORTD = command;
  1161  0304  0875               	movf	send_cmd@command,w
  1162  0305  0088               	movwf	8	;volatile
  1163  0306                     l1136:	
  1164                           
  1165                           ;main.c: 500:     PORTEbits.RE2 = 0;
  1166  0306  1109               	bcf	9,2	;volatile
  1167                           
  1168                           ;main.c: 501:     _delay((unsigned long)((3)*(32000000L/4000.0)));
  1169  0307  3020               	movlw	32
  1170  0308  00F4               	movwf	??_send_cmd+1
  1171  0309  3029               	movlw	41
  1172  030A  00F3               	movwf	??_send_cmd
  1173  030B                     u1167:	
  1174  030B  0BF3               	decfsz	??_send_cmd,f
  1175  030C  2B0B               	goto	u1167
  1176  030D  0BF4               	decfsz	??_send_cmd+1,f
  1177  030E  2B0B               	goto	u1167
  1178  030F  2B10               	nop2
  1179  0310                     l1138:	
  1180                           
  1181                           ;main.c: 502:     PORTEbits.RE1 = 0;
  1182  0310  1283               	bcf	3,5	;RP0=0, select bank0
  1183  0311  1303               	bcf	3,6	;RP1=0, select bank0
  1184  0312  1089               	bcf	9,1	;volatile
  1185                           
  1186                           ;main.c: 503:     _delay((unsigned long)((3)*(32000000L/4000.0)));
  1187  0313  3020               	movlw	32
  1188  0314  00F4               	movwf	??_send_cmd+1
  1189  0315  3029               	movlw	41
  1190  0316  00F3               	movwf	??_send_cmd
  1191  0317                     u1177:	
  1192  0317  0BF3               	decfsz	??_send_cmd,f
  1193  0318  2B17               	goto	u1177
  1194  0319  0BF4               	decfsz	??_send_cmd+1,f
  1195  031A  2B17               	goto	u1177
  1196  031B  2B1C               	nop2
  1197  031C                     l1140:	
  1198                           
  1199                           ;main.c: 504:     PORTEbits.RE1 = 1;
  1200  031C  1283               	bcf	3,5	;RP0=0, select bank0
  1201  031D  1303               	bcf	3,6	;RP1=0, select bank0
  1202  031E  1489               	bsf	9,1	;volatile
  1203  031F                     l180:	
  1204  031F  0008               	return
  1205  0320                     __end_of_send_cmd:	
  1206                           
  1207                           	psect	text3
  1208  034C                     __ptext3:	
  1209 ;; *************** function _initPic *****************
  1210 ;; Defined at:
  1211 ;;		line 439 in file "main.c"
  1212 ;; Parameters:    Size  Location     Type
  1213 ;;		None
  1214 ;; Auto vars:     Size  Location     Type
  1215 ;;		None
  1216 ;; Return value:  Size  Location     Type
  1217 ;;                  1    wreg      void 
  1218 ;; Registers used:
  1219 ;;		wreg, status,2
  1220 ;; Tracked objects:
  1221 ;;		On entry : 0/0
  1222 ;;		On exit  : 0/0
  1223 ;;		Unchanged: 0/0
  1224 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1225 ;;      Params:         0       0       0       0       0
  1226 ;;      Locals:         0       0       0       0       0
  1227 ;;      Temps:          0       0       0       0       0
  1228 ;;      Totals:         0       0       0       0       0
  1229 ;;Total ram usage:        0 bytes
  1230 ;; Hardware stack levels used:    1
  1231 ;; Hardware stack levels required when called:    1
  1232 ;; This function calls:
  1233 ;;		Nothing
  1234 ;; This function is called by:
  1235 ;;		_main
  1236 ;; This function uses a non-reentrant model
  1237 ;;
  1238                           
  1239                           
  1240                           ;psect for function _initPic
  1241  034C                     _initPic:	
  1242  034C                     l1186:	
  1243                           ;incstack = 0
  1244                           ; Regs used in _initPic: [wreg+status,2]
  1245                           
  1246                           
  1247                           ;main.c: 441:     TRISD = 0x00;
  1248  034C  1683               	bsf	3,5	;RP0=1, select bank1
  1249  034D  1303               	bcf	3,6	;RP1=0, select bank1
  1250  034E  0188               	clrf	8	;volatile
  1251  034F                     l1188:	
  1252                           
  1253                           ;main.c: 442:     TRISB = 0xFF;
  1254  034F  30FF               	movlw	255
  1255  0350  0086               	movwf	6	;volatile
  1256  0351                     l1190:	
  1257                           
  1258                           ;main.c: 443:     TRISE = 0x00;
  1259  0351  0189               	clrf	9	;volatile
  1260                           
  1261                           ;main.c: 445:     INTCON = 0xA0;
  1262  0352  30A0               	movlw	160
  1263  0353  008B               	movwf	11	;volatile
  1264                           
  1265                           ;main.c: 446:     OPTION_REG = 0x04;
  1266  0354  3004               	movlw	4
  1267  0355  0081               	movwf	1	;volatile
  1268                           
  1269                           ;main.c: 447:     TMR0 = 6;
  1270  0356  3006               	movlw	6
  1271  0357  1283               	bcf	3,5	;RP0=0, select bank0
  1272  0358  1303               	bcf	3,6	;RP1=0, select bank0
  1273  0359  0081               	movwf	1	;volatile
  1274  035A                     l159:	
  1275  035A  0008               	return
  1276  035B                     __end_of_initPic:	
  1277                           
  1278                           	psect	text4
  1279  0320                     __ptext4:	
  1280 ;; *************** function _Uart_send_string *****************
  1281 ;; Defined at:
  1282 ;;		line 427 in file "main.c"
  1283 ;; Parameters:    Size  Location     Type
  1284 ;;  str             1    wreg     PTR unsigned char 
  1285 ;;		 -> strToSend(8), 
  1286 ;; Auto vars:     Size  Location     Type
  1287 ;;  str             1    6[COMMON] PTR unsigned char 
  1288 ;;		 -> strToSend(8), 
  1289 ;;  i               1    5[COMMON] unsigned char 
  1290 ;; Return value:  Size  Location     Type
  1291 ;;                  1    wreg      void 
  1292 ;; Registers used:
  1293 ;;		wreg, fsr0l, fsr0h, status,2, status,0, pclath, cstack
  1294 ;; Tracked objects:
  1295 ;;		On entry : 0/0
  1296 ;;		On exit  : 0/0
  1297 ;;		Unchanged: 0/0
  1298 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1299 ;;      Params:         0       0       0       0       0
  1300 ;;      Locals:         2       0       0       0       0
  1301 ;;      Temps:          1       0       0       0       0
  1302 ;;      Totals:         3       0       0       0       0
  1303 ;;Total ram usage:        3 bytes
  1304 ;; Hardware stack levels used:    1
  1305 ;; Hardware stack levels required when called:    2
  1306 ;; This function calls:
  1307 ;;		_UART_TxChar
  1308 ;; This function is called by:
  1309 ;;		_main
  1310 ;;		_messageTransmission
  1311 ;; This function uses a non-reentrant model
  1312 ;;
  1313                           
  1314                           
  1315                           ;psect for function _Uart_send_string
  1316  0320                     _Uart_send_string:	
  1317                           
  1318                           ;incstack = 0
  1319                           ; Regs used in _Uart_send_string: [wreg-fsr0h+status,2+status,0+pclath+cstack]
  1320                           ;Uart_send_string@str stored from wreg
  1321  0320  00F6               	movwf	Uart_send_string@str
  1322  0321                     l1226:	
  1323                           
  1324                           ;main.c: 427: void Uart_send_string(char *str);main.c: 428: {;main.c: 429:     char i;;m
      +                          ain.c: 430:     for(i=0;i<6;i++)
  1325  0321  01F5               	clrf	Uart_send_string@i
  1326  0322                     l1232:	
  1327                           
  1328                           ;main.c: 431:     {;main.c: 432:         UART_TxChar(*(str+i));
  1329  0322  0875               	movf	Uart_send_string@i,w
  1330  0323  0776               	addwf	Uart_send_string@str,w
  1331  0324  00F4               	movwf	??_Uart_send_string
  1332  0325  0874               	movf	??_Uart_send_string,w
  1333  0326  0084               	movwf	4
  1334  0327  1383               	bcf	3,7	;select IRP bank0
  1335  0328  0800               	movf	0,w
  1336  0329  120A  118A  235B  120A  118A  	fcall	_UART_TxChar
  1337  032E                     l1234:	
  1338                           
  1339                           ;main.c: 433:     }
  1340  032E  3001               	movlw	1
  1341  032F  00F4               	movwf	??_Uart_send_string
  1342  0330  0874               	movf	??_Uart_send_string,w
  1343  0331  07F5               	addwf	Uart_send_string@i,f
  1344  0332                     l1236:	
  1345  0332  3006               	movlw	6
  1346  0333  0275               	subwf	Uart_send_string@i,w
  1347  0334  1C03               	skipc
  1348  0335  2B37               	goto	u541
  1349  0336  2B38               	goto	u540
  1350  0337                     u541:	
  1351  0337  2B22               	goto	l1232
  1352  0338                     u540:	
  1353  0338                     l156:	
  1354  0338  0008               	return
  1355  0339                     __end_of_Uart_send_string:	
  1356                           
  1357                           	psect	text5
  1358  035B                     __ptext5:	
  1359 ;; *************** function _UART_TxChar *****************
  1360 ;; Defined at:
  1361 ;;		line 541 in file "main.c"
  1362 ;; Parameters:    Size  Location     Type
  1363 ;;  dato            1    wreg     unsigned char 
  1364 ;; Auto vars:     Size  Location     Type
  1365 ;;  dato            1    3[COMMON] unsigned char 
  1366 ;; Return value:  Size  Location     Type
  1367 ;;                  1    wreg      void 
  1368 ;; Registers used:
  1369 ;;		wreg
  1370 ;; Tracked objects:
  1371 ;;		On entry : 0/0
  1372 ;;		On exit  : 0/0
  1373 ;;		Unchanged: 0/0
  1374 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1375 ;;      Params:         0       0       0       0       0
  1376 ;;      Locals:         1       0       0       0       0
  1377 ;;      Temps:          0       0       0       0       0
  1378 ;;      Totals:         1       0       0       0       0
  1379 ;;Total ram usage:        1 bytes
  1380 ;; Hardware stack levels used:    1
  1381 ;; Hardware stack levels required when called:    1
  1382 ;; This function calls:
  1383 ;;		Nothing
  1384 ;; This function is called by:
  1385 ;;		_main
  1386 ;;		_Uart_send_string
  1387 ;; This function uses a non-reentrant model
  1388 ;;
  1389                           
  1390                           
  1391                           ;psect for function _UART_TxChar
  1392  035B                     _UART_TxChar:	
  1393                           
  1394                           ;incstack = 0
  1395                           ; Regs used in _UART_TxChar: [wreg]
  1396                           ;UART_TxChar@dato stored from wreg
  1397  035B  00F3               	movwf	UART_TxChar@dato
  1398  035C                     l1142:	
  1399  035C                     l189:	
  1400                           ;main.c: 541: void UART_TxChar(char dato);main.c: 542: {;main.c: 543:     while (!TXIF);
  1401                           
  1402  035C  1283               	bcf	3,5	;RP0=0, select bank0
  1403  035D  1303               	bcf	3,6	;RP1=0, select bank0
  1404  035E  1E0C               	btfss	12,4	;volatile
  1405  035F  2B61               	goto	u421
  1406  0360  2B62               	goto	u420
  1407  0361                     u421:	
  1408  0361  2B5C               	goto	l189
  1409  0362                     u420:	
  1410  0362                     l191:	
  1411                           
  1412                           ;main.c: 544:     TXIF = 0;
  1413  0362  120C               	bcf	12,4	;volatile
  1414  0363                     l1144:	
  1415                           
  1416                           ;main.c: 545:     TXREG = dato;
  1417  0363  0873               	movf	UART_TxChar@dato,w
  1418  0364  0099               	movwf	25	;volatile
  1419  0365                     l192:	
  1420  0365  0008               	return
  1421  0366                     __end_of_UART_TxChar:	
  1422                           
  1423                           	psect	text6
  1424  02C6                     __ptext6:	
  1425 ;; *************** function _UART_init *****************
  1426 ;; Defined at:
  1427 ;;		line 528 in file "main.c"
  1428 ;; Parameters:    Size  Location     Type
  1429 ;;  baudrate        2   14[BANK0 ] int 
  1430 ;; Auto vars:     Size  Location     Type
  1431 ;;		None
  1432 ;; Return value:  Size  Location     Type
  1433 ;;                  1    wreg      void 
  1434 ;; Registers used:
  1435 ;;		wreg, status,2, status,0, pclath, cstack
  1436 ;; Tracked objects:
  1437 ;;		On entry : 0/0
  1438 ;;		On exit  : 0/0
  1439 ;;		Unchanged: 0/0
  1440 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1441 ;;      Params:         0       2       0       0       0
  1442 ;;      Locals:         0       0       0       0       0
  1443 ;;      Temps:          4       0       0       0       0
  1444 ;;      Totals:         4       2       0       0       0
  1445 ;;Total ram usage:        6 bytes
  1446 ;; Hardware stack levels used:    1
  1447 ;; Hardware stack levels required when called:    2
  1448 ;; This function calls:
  1449 ;;		___aldiv
  1450 ;; This function is called by:
  1451 ;;		_main
  1452 ;; This function uses a non-reentrant model
  1453 ;;
  1454                           
  1455                           
  1456                           ;psect for function _UART_init
  1457  02C6                     _UART_init:	
  1458  02C6                     l1552:	
  1459                           ;incstack = 0
  1460                           ; Regs used in _UART_init: [wreg+status,2+status,0+pclath+cstack]
  1461                           
  1462                           
  1463                           ;main.c: 528: void UART_init(int baudrate);main.c: 529: {;main.c: 530:     TRISCbits.TRI
      +                          SC6 = 0;
  1464  02C6  1683               	bsf	3,5	;RP0=1, select bank1
  1465  02C7  1303               	bcf	3,6	;RP1=0, select bank1
  1466  02C8  1307               	bcf	7,6	;volatile
  1467                           
  1468                           ;main.c: 531:     TXSTAbits.TXEN = 1;
  1469  02C9  1698               	bsf	24,5	;volatile
  1470                           
  1471                           ;main.c: 532:     RCSTAbits.SPEN = 1;
  1472  02CA  1283               	bcf	3,5	;RP0=0, select bank0
  1473  02CB  1303               	bcf	3,6	;RP1=0, select bank0
  1474  02CC  1798               	bsf	24,7	;volatile
  1475                           
  1476                           ;main.c: 533:     RCSTAbits.CREN = 1;
  1477  02CD  1618               	bsf	24,4	;volatile
  1478  02CE                     l1554:	
  1479                           
  1480                           ;main.c: 534:     SPBRG = (32000000L/(long)(64UL*baudrate))-1;
  1481  02CE  0841               	movf	UART_init@baudrate,w
  1482  02CF  00F4               	movwf	??_UART_init
  1483  02D0  0842               	movf	UART_init@baudrate+1,w
  1484  02D1  00F5               	movwf	??_UART_init+1
  1485  02D2  3000               	movlw	0
  1486  02D3  1BF5               	btfsc	??_UART_init+1,7
  1487  02D4  30FF               	movlw	255
  1488  02D5  00F6               	movwf	??_UART_init+2
  1489  02D6  00F7               	movwf	??_UART_init+3
  1490  02D7  3006               	movlw	6
  1491  02D8                     u1075:	
  1492  02D8  1003               	clrc
  1493  02D9  0DF4               	rlf	??_UART_init,f
  1494  02DA  0DF5               	rlf	??_UART_init+1,f
  1495  02DB  0DF6               	rlf	??_UART_init+2,f
  1496  02DC  0DF7               	rlf	??_UART_init+3,f
  1497  02DD                     u1070:	
  1498  02DD  3EFF               	addlw	-1
  1499  02DE  1D03               	skipz
  1500  02DF  2AD8               	goto	u1075
  1501  02E0  0877               	movf	??_UART_init+3,w
  1502  02E1  00B6               	movwf	___aldiv@divisor+3
  1503  02E2  0876               	movf	??_UART_init+2,w
  1504  02E3  00B5               	movwf	___aldiv@divisor+2
  1505  02E4  0875               	movf	??_UART_init+1,w
  1506  02E5  00B4               	movwf	___aldiv@divisor+1
  1507  02E6  0874               	movf	??_UART_init,w
  1508  02E7  00B3               	movwf	___aldiv@divisor
  1509  02E8  3001               	movlw	1
  1510  02E9  00BA               	movwf	___aldiv@dividend+3
  1511  02EA  30E8               	movlw	232
  1512  02EB  00B9               	movwf	___aldiv@dividend+2
  1513  02EC  3048               	movlw	72
  1514  02ED  00B8               	movwf	___aldiv@dividend+1
  1515  02EE  3000               	movlw	0
  1516  02EF  00B7               	movwf	___aldiv@dividend
  1517  02F0  120A  118A  2157  120A  118A  	fcall	___aldiv
  1518  02F5  1283               	bcf	3,5	;RP0=0, select bank0
  1519  02F6  1303               	bcf	3,6	;RP1=0, select bank0
  1520  02F7  0833               	movf	?___aldiv,w
  1521  02F8  3EFF               	addlw	255
  1522  02F9  1683               	bsf	3,5	;RP0=1, select bank1
  1523  02FA  1303               	bcf	3,6	;RP1=0, select bank1
  1524  02FB  0099               	movwf	25	;volatile
  1525  02FC                     l1556:	
  1526                           
  1527                           ;main.c: 535:     INTCONbits.GIE = 1;
  1528  02FC  178B               	bsf	11,7	;volatile
  1529  02FD                     l1558:	
  1530                           
  1531                           ;main.c: 536:     INTCONbits.PEIE = 1;
  1532  02FD  170B               	bsf	11,6	;volatile
  1533  02FE                     l1560:	
  1534                           
  1535                           ;main.c: 537:     PIE1bits.RCIE = 1;
  1536  02FE  168C               	bsf	12,5	;volatile
  1537  02FF                     l186:	
  1538  02FF  0008               	return
  1539  0300                     __end_of_UART_init:	
  1540                           
  1541                           	psect	text7
  1542  0157                     __ptext7:	
  1543 ;; *************** function ___aldiv *****************
  1544 ;; Defined at:
  1545 ;;		line 5 in file "C:\Program Files (x86)\Microchip\xc8\v2.10\pic\sources\c90\common\aldiv.c"
  1546 ;; Parameters:    Size  Location     Type
  1547 ;;  divisor         4    0[BANK0 ] long 
  1548 ;;  dividend        4    4[BANK0 ] long 
  1549 ;; Auto vars:     Size  Location     Type
  1550 ;;  quotient        4   10[BANK0 ] long 
  1551 ;;  sign            1    9[BANK0 ] unsigned char 
  1552 ;;  counter         1    8[BANK0 ] unsigned char 
  1553 ;; Return value:  Size  Location     Type
  1554 ;;                  4    0[BANK0 ] long 
  1555 ;; Registers used:
  1556 ;;		wreg, status,2, status,0
  1557 ;; Tracked objects:
  1558 ;;		On entry : 0/0
  1559 ;;		On exit  : 0/0
  1560 ;;		Unchanged: 0/0
  1561 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1562 ;;      Params:         0       8       0       0       0
  1563 ;;      Locals:         0       6       0       0       0
  1564 ;;      Temps:          1       0       0       0       0
  1565 ;;      Totals:         1      14       0       0       0
  1566 ;;Total ram usage:       15 bytes
  1567 ;; Hardware stack levels used:    1
  1568 ;; Hardware stack levels required when called:    1
  1569 ;; This function calls:
  1570 ;;		Nothing
  1571 ;; This function is called by:
  1572 ;;		_UART_init
  1573 ;; This function uses a non-reentrant model
  1574 ;;
  1575                           
  1576                           
  1577                           ;psect for function ___aldiv
  1578  0157                     ___aldiv:	
  1579  0157                     l1512:	
  1580                           ;incstack = 0
  1581                           ; Regs used in ___aldiv: [wreg+status,2+status,0]
  1582                           
  1583  0157  1283               	bcf	3,5	;RP0=0, select bank0
  1584  0158  1303               	bcf	3,6	;RP1=0, select bank0
  1585  0159  01BC               	clrf	___aldiv@sign
  1586  015A                     l1514:	
  1587  015A  1FB6               	btfss	___aldiv@divisor+3,7
  1588  015B  295D               	goto	u971
  1589  015C  295E               	goto	u970
  1590  015D                     u971:	
  1591  015D  296B               	goto	l343
  1592  015E                     u970:	
  1593  015E                     l1516:	
  1594  015E  09B3               	comf	___aldiv@divisor,f
  1595  015F  09B4               	comf	___aldiv@divisor+1,f
  1596  0160  09B5               	comf	___aldiv@divisor+2,f
  1597  0161  09B6               	comf	___aldiv@divisor+3,f
  1598  0162  0AB3               	incf	___aldiv@divisor,f
  1599  0163  1903               	skipnz
  1600  0164  0AB4               	incf	___aldiv@divisor+1,f
  1601  0165  1903               	skipnz
  1602  0166  0AB5               	incf	___aldiv@divisor+2,f
  1603  0167  1903               	skipnz
  1604  0168  0AB6               	incf	___aldiv@divisor+3,f
  1605  0169  01BC               	clrf	___aldiv@sign
  1606  016A  0ABC               	incf	___aldiv@sign,f
  1607  016B                     l343:	
  1608  016B  1FBA               	btfss	___aldiv@dividend+3,7
  1609  016C  296E               	goto	u981
  1610  016D  296F               	goto	u980
  1611  016E                     u981:	
  1612  016E  297E               	goto	l1522
  1613  016F                     u980:	
  1614  016F                     l1518:	
  1615  016F  09B7               	comf	___aldiv@dividend,f
  1616  0170  09B8               	comf	___aldiv@dividend+1,f
  1617  0171  09B9               	comf	___aldiv@dividend+2,f
  1618  0172  09BA               	comf	___aldiv@dividend+3,f
  1619  0173  0AB7               	incf	___aldiv@dividend,f
  1620  0174  1903               	skipnz
  1621  0175  0AB8               	incf	___aldiv@dividend+1,f
  1622  0176  1903               	skipnz
  1623  0177  0AB9               	incf	___aldiv@dividend+2,f
  1624  0178  1903               	skipnz
  1625  0179  0ABA               	incf	___aldiv@dividend+3,f
  1626  017A                     l1520:	
  1627  017A  3001               	movlw	1
  1628  017B  00F3               	movwf	??___aldiv
  1629  017C  0873               	movf	??___aldiv,w
  1630  017D  06BC               	xorwf	___aldiv@sign,f
  1631  017E                     l1522:	
  1632  017E  3000               	movlw	0
  1633  017F  00C0               	movwf	___aldiv@quotient+3
  1634  0180  3000               	movlw	0
  1635  0181  00BF               	movwf	___aldiv@quotient+2
  1636  0182  3000               	movlw	0
  1637  0183  00BE               	movwf	___aldiv@quotient+1
  1638  0184  3000               	movlw	0
  1639  0185  00BD               	movwf	___aldiv@quotient
  1640  0186                     l1524:	
  1641  0186  0836               	movf	___aldiv@divisor+3,w
  1642  0187  0435               	iorwf	___aldiv@divisor+2,w
  1643  0188  0434               	iorwf	___aldiv@divisor+1,w
  1644  0189  0433               	iorwf	___aldiv@divisor,w
  1645  018A  1903               	skipnz
  1646  018B  298D               	goto	u991
  1647  018C  298E               	goto	u990
  1648  018D                     u991:	
  1649  018D  29DB               	goto	l1544
  1650  018E                     u990:	
  1651  018E                     l1526:	
  1652  018E  01BB               	clrf	___aldiv@counter
  1653  018F  0ABB               	incf	___aldiv@counter,f
  1654  0190  299E               	goto	l1530
  1655  0191                     l1528:	
  1656  0191  3001               	movlw	1
  1657  0192  00F3               	movwf	??___aldiv
  1658  0193                     u1005:	
  1659  0193  1003               	clrc
  1660  0194  0DB3               	rlf	___aldiv@divisor,f
  1661  0195  0DB4               	rlf	___aldiv@divisor+1,f
  1662  0196  0DB5               	rlf	___aldiv@divisor+2,f
  1663  0197  0DB6               	rlf	___aldiv@divisor+3,f
  1664  0198  0BF3               	decfsz	??___aldiv,f
  1665  0199  2993               	goto	u1005
  1666  019A  3001               	movlw	1
  1667  019B  00F3               	movwf	??___aldiv
  1668  019C  0873               	movf	??___aldiv,w
  1669  019D  07BB               	addwf	___aldiv@counter,f
  1670  019E                     l1530:	
  1671  019E  1FB6               	btfss	___aldiv@divisor+3,7
  1672  019F  29A1               	goto	u1011
  1673  01A0  29A2               	goto	u1010
  1674  01A1                     u1011:	
  1675  01A1  2991               	goto	l1528
  1676  01A2                     u1010:	
  1677  01A2                     l1532:	
  1678  01A2  3001               	movlw	1
  1679  01A3  00F3               	movwf	??___aldiv
  1680  01A4                     u1025:	
  1681  01A4  1003               	clrc
  1682  01A5  0DBD               	rlf	___aldiv@quotient,f
  1683  01A6  0DBE               	rlf	___aldiv@quotient+1,f
  1684  01A7  0DBF               	rlf	___aldiv@quotient+2,f
  1685  01A8  0DC0               	rlf	___aldiv@quotient+3,f
  1686  01A9  0BF3               	decfsz	??___aldiv,f
  1687  01AA  29A4               	goto	u1025
  1688  01AB                     l1534:	
  1689  01AB  0836               	movf	___aldiv@divisor+3,w
  1690  01AC  023A               	subwf	___aldiv@dividend+3,w
  1691  01AD  1D03               	skipz
  1692  01AE  29B9               	goto	u1035
  1693  01AF  0835               	movf	___aldiv@divisor+2,w
  1694  01B0  0239               	subwf	___aldiv@dividend+2,w
  1695  01B1  1D03               	skipz
  1696  01B2  29B9               	goto	u1035
  1697  01B3  0834               	movf	___aldiv@divisor+1,w
  1698  01B4  0238               	subwf	___aldiv@dividend+1,w
  1699  01B5  1D03               	skipz
  1700  01B6  29B9               	goto	u1035
  1701  01B7  0833               	movf	___aldiv@divisor,w
  1702  01B8  0237               	subwf	___aldiv@dividend,w
  1703  01B9                     u1035:	
  1704  01B9  1C03               	skipc
  1705  01BA  29BC               	goto	u1031
  1706  01BB  29BD               	goto	u1030
  1707  01BC                     u1031:	
  1708  01BC  29CC               	goto	l1540
  1709  01BD                     u1030:	
  1710  01BD                     l1536:	
  1711  01BD  0833               	movf	___aldiv@divisor,w
  1712  01BE  02B7               	subwf	___aldiv@dividend,f
  1713  01BF  0834               	movf	___aldiv@divisor+1,w
  1714  01C0  1C03               	skipc
  1715  01C1  0F34               	incfsz	___aldiv@divisor+1,w
  1716  01C2  02B8               	subwf	___aldiv@dividend+1,f
  1717  01C3  0835               	movf	___aldiv@divisor+2,w
  1718  01C4  1C03               	skipc
  1719  01C5  0F35               	incfsz	___aldiv@divisor+2,w
  1720  01C6  02B9               	subwf	___aldiv@dividend+2,f
  1721  01C7  0836               	movf	___aldiv@divisor+3,w
  1722  01C8  1C03               	skipc
  1723  01C9  0F36               	incfsz	___aldiv@divisor+3,w
  1724  01CA  02BA               	subwf	___aldiv@dividend+3,f
  1725  01CB                     l1538:	
  1726  01CB  143D               	bsf	___aldiv@quotient,0
  1727  01CC                     l1540:	
  1728  01CC  3001               	movlw	1
  1729  01CD                     u1045:	
  1730  01CD  1003               	clrc
  1731  01CE  0CB6               	rrf	___aldiv@divisor+3,f
  1732  01CF  0CB5               	rrf	___aldiv@divisor+2,f
  1733  01D0  0CB4               	rrf	___aldiv@divisor+1,f
  1734  01D1  0CB3               	rrf	___aldiv@divisor,f
  1735  01D2  3EFF               	addlw	-1
  1736  01D3  1D03               	skipz
  1737  01D4  29CD               	goto	u1045
  1738  01D5                     l1542:	
  1739  01D5  3001               	movlw	1
  1740  01D6  02BB               	subwf	___aldiv@counter,f
  1741  01D7  1D03               	btfss	3,2
  1742  01D8  29DA               	goto	u1051
  1743  01D9  29DB               	goto	u1050
  1744  01DA                     u1051:	
  1745  01DA  29A2               	goto	l1532
  1746  01DB                     u1050:	
  1747  01DB                     l1544:	
  1748  01DB  083C               	movf	___aldiv@sign,w
  1749  01DC  1903               	btfsc	3,2
  1750  01DD  29DF               	goto	u1061
  1751  01DE  29E0               	goto	u1060
  1752  01DF                     u1061:	
  1753  01DF  29EB               	goto	l1548
  1754  01E0                     u1060:	
  1755  01E0                     l1546:	
  1756  01E0  09BD               	comf	___aldiv@quotient,f
  1757  01E1  09BE               	comf	___aldiv@quotient+1,f
  1758  01E2  09BF               	comf	___aldiv@quotient+2,f
  1759  01E3  09C0               	comf	___aldiv@quotient+3,f
  1760  01E4  0ABD               	incf	___aldiv@quotient,f
  1761  01E5  1903               	skipnz
  1762  01E6  0ABE               	incf	___aldiv@quotient+1,f
  1763  01E7  1903               	skipnz
  1764  01E8  0ABF               	incf	___aldiv@quotient+2,f
  1765  01E9  1903               	skipnz
  1766  01EA  0AC0               	incf	___aldiv@quotient+3,f
  1767  01EB                     l1548:	
  1768  01EB  0840               	movf	___aldiv@quotient+3,w
  1769  01EC  00B6               	movwf	?___aldiv+3
  1770  01ED  083F               	movf	___aldiv@quotient+2,w
  1771  01EE  00B5               	movwf	?___aldiv+2
  1772  01EF  083E               	movf	___aldiv@quotient+1,w
  1773  01F0  00B4               	movwf	?___aldiv+1
  1774  01F1  083D               	movf	___aldiv@quotient,w
  1775  01F2  00B3               	movwf	?___aldiv
  1776  01F3                     l353:	
  1777  01F3  0008               	return
  1778  01F4                     __end_of___aldiv:	
  1779                           
  1780                           	psect	text8
  1781  01F4                     __ptext8:	
  1782 ;; *************** function _ISR *****************
  1783 ;; Defined at:
  1784 ;;		line 297 in file "main.c"
  1785 ;; Parameters:    Size  Location     Type
  1786 ;;		None
  1787 ;; Auto vars:     Size  Location     Type
  1788 ;;		None
  1789 ;; Return value:  Size  Location     Type
  1790 ;;                  1    wreg      void 
  1791 ;; Registers used:
  1792 ;;		wreg, status,2, status,0
  1793 ;; Tracked objects:
  1794 ;;		On entry : 0/0
  1795 ;;		On exit  : 0/0
  1796 ;;		Unchanged: 0/0
  1797 ;; Data sizes:     COMMON   BANK0   BANK1   BANK3   BANK2
  1798 ;;      Params:         0       0       0       0       0
  1799 ;;      Locals:         0       0       0       0       0
  1800 ;;      Temps:          3       0       0       0       0
  1801 ;;      Totals:         3       0       0       0       0
  1802 ;;Total ram usage:        3 bytes
  1803 ;; Hardware stack levels used:    1
  1804 ;; This function calls:
  1805 ;;		Nothing
  1806 ;; This function is called by:
  1807 ;;		Interrupt level 1
  1808 ;; This function uses a non-reentrant model
  1809 ;;
  1810                           
  1811                           
  1812                           ;psect for function _ISR
  1813  01F4                     _ISR:	
  1814  01F4                     i1l1370:	
  1815                           
  1816                           ;main.c: 301:     if (!(PORTBbits.RB3)&& (!oldBtn1))
  1817  01F4  1283               	bcf	3,5	;RP0=0, select bank0
  1818  01F5  1303               	bcf	3,6	;RP1=0, select bank0
  1819  01F6  1986               	btfsc	6,3	;volatile
  1820  01F7  29F9               	goto	u60_21
  1821  01F8  29FA               	goto	u60_20
  1822  01F9                     u60_21:	
  1823  01F9  2A09               	goto	i1l120
  1824  01FA                     u60_20:	
  1825  01FA                     i1l1372:	
  1826  01FA  087A               	movf	_oldBtn1,w
  1827  01FB  1D03               	btfss	3,2
  1828  01FC  29FE               	goto	u61_21
  1829  01FD  29FF               	goto	u61_20
  1830  01FE                     u61_21:	
  1831  01FE  2A09               	goto	i1l120
  1832  01FF                     u61_20:	
  1833  01FF                     i1l1374:	
  1834                           
  1835                           ;main.c: 302:     {;main.c: 303:         stat1=!stat1;
  1836  01FF  0825               	movf	_stat1,w
  1837  0200  1903               	btfsc	3,2
  1838  0201  2A03               	goto	u62_21
  1839  0202  2A05               	goto	u62_20
  1840  0203                     u62_21:	
  1841  0203  3001               	movlw	1
  1842  0204  2A06               	goto	u63_20
  1843  0205                     u62_20:	
  1844  0205  3000               	movlw	0
  1845  0206                     u63_20:	
  1846  0206  00F0               	movwf	??_ISR
  1847  0207  0870               	movf	??_ISR,w
  1848  0208  00A5               	movwf	_stat1
  1849  0209                     i1l120:	
  1850                           ;main.c: 305:     }
  1851                           
  1852                           
  1853                           ;main.c: 306:     oldBtn1 = !PORTBbits.RB3;
  1854  0209  1003               	clrc
  1855  020A  1D86               	btfss	6,3	;volatile
  1856  020B  1403               	setc
  1857  020C  3000               	movlw	0
  1858  020D  1803               	btfsc	3,0
  1859  020E  3001               	movlw	1
  1860  020F  00FA               	movwf	_oldBtn1
  1861  0210                     i1l1376:	
  1862                           
  1863                           ;main.c: 308:     if (!(PORTBbits.RB4)&& (!oldBtn2))
  1864  0210  1A06               	btfsc	6,4	;volatile
  1865  0211  2A13               	goto	u64_21
  1866  0212  2A14               	goto	u64_20
  1867  0213                     u64_21:	
  1868  0213  2A23               	goto	i1l121
  1869  0214                     u64_20:	
  1870  0214                     i1l1378:	
  1871  0214  0879               	movf	_oldBtn2,w
  1872  0215  1D03               	btfss	3,2
  1873  0216  2A18               	goto	u65_21
  1874  0217  2A19               	goto	u65_20
  1875  0218                     u65_21:	
  1876  0218  2A23               	goto	i1l121
  1877  0219                     u65_20:	
  1878  0219                     i1l1380:	
  1879                           
  1880                           ;main.c: 309:     {;main.c: 310:         stat2=!stat2;
  1881  0219  0824               	movf	_stat2,w
  1882  021A  1903               	btfsc	3,2
  1883  021B  2A1D               	goto	u66_21
  1884  021C  2A1F               	goto	u66_20
  1885  021D                     u66_21:	
  1886  021D  3001               	movlw	1
  1887  021E  2A20               	goto	u67_20
  1888  021F                     u66_20:	
  1889  021F  3000               	movlw	0
  1890  0220                     u67_20:	
  1891  0220  00F0               	movwf	??_ISR
  1892  0221  0870               	movf	??_ISR,w
  1893  0222  00A4               	movwf	_stat2
  1894  0223                     i1l121:	
  1895                           ;main.c: 312:     }
  1896                           
  1897                           
  1898                           ;main.c: 313:     oldBtn2 = !PORTBbits.RB4;
  1899  0223  1003               	clrc
  1900  0224  1E06               	btfss	6,4	;volatile
  1901  0225  1403               	setc
  1902  0226  3000               	movlw	0
  1903  0227  1803               	btfsc	3,0
  1904  0228  3001               	movlw	1
  1905  0229  00F9               	movwf	_oldBtn2
  1906  022A                     i1l1382:	
  1907                           
  1908                           ;main.c: 315:     if (!(PORTBbits.RB5)&& (!oldBtn3))
  1909  022A  1A86               	btfsc	6,5	;volatile
  1910  022B  2A2D               	goto	u68_21
  1911  022C  2A2E               	goto	u68_20
  1912  022D                     u68_21:	
  1913  022D  2A3D               	goto	i1l122
  1914  022E                     u68_20:	
  1915  022E                     i1l1384:	
  1916  022E  0878               	movf	_oldBtn3,w
  1917  022F  1D03               	btfss	3,2
  1918  0230  2A32               	goto	u69_21
  1919  0231  2A33               	goto	u69_20
  1920  0232                     u69_21:	
  1921  0232  2A3D               	goto	i1l122
  1922  0233                     u69_20:	
  1923  0233                     i1l1386:	
  1924                           
  1925                           ;main.c: 316:     {;main.c: 317:         stat3=!stat3;
  1926  0233  0823               	movf	_stat3,w
  1927  0234  1903               	btfsc	3,2
  1928  0235  2A37               	goto	u70_21
  1929  0236  2A39               	goto	u70_20
  1930  0237                     u70_21:	
  1931  0237  3001               	movlw	1
  1932  0238  2A3A               	goto	u71_20
  1933  0239                     u70_20:	
  1934  0239  3000               	movlw	0
  1935  023A                     u71_20:	
  1936  023A  00F0               	movwf	??_ISR
  1937  023B  0870               	movf	??_ISR,w
  1938  023C  00A3               	movwf	_stat3
  1939  023D                     i1l122:	
  1940                           ;main.c: 319:     }
  1941                           
  1942                           
  1943                           ;main.c: 320:     oldBtn3 = !PORTBbits.RB5;
  1944  023D  1003               	clrc
  1945  023E  1E86               	btfss	6,5	;volatile
  1946  023F  1403               	setc
  1947  0240  3000               	movlw	0
  1948  0241  1803               	btfsc	3,0
  1949  0242  3001               	movlw	1
  1950  0243  00F8               	movwf	_oldBtn3
  1951  0244                     i1l1388:	
  1952                           
  1953                           ;main.c: 324:    if(RCIF)
  1954  0244  1E8C               	btfss	12,5	;volatile
  1955  0245  2A47               	goto	u72_21
  1956  0246  2A48               	goto	u72_20
  1957  0247                     u72_21:	
  1958  0247  2A53               	goto	i1l1396
  1959  0248                     u72_20:	
  1960  0248                     i1l124:	
  1961  0248  1E8C               	btfss	12,5	;volatile
  1962  0249  2A4B               	goto	u73_21
  1963  024A  2A4C               	goto	u73_20
  1964  024B                     u73_21:	
  1965  024B  2A48               	goto	i1l124
  1966  024C                     u73_20:	
  1967  024C                     i1l126:	
  1968                           
  1969                           ;main.c: 327:         RCIF = 0;
  1970  024C  128C               	bcf	12,5	;volatile
  1971  024D                     i1l1392:	
  1972                           
  1973                           ;main.c: 328:         datoSeriale = RCREG;
  1974  024D  081A               	movf	26,w	;volatile
  1975  024E  00F0               	movwf	??_ISR
  1976  024F  0870               	movf	??_ISR,w
  1977  0250  00A9               	movwf	_datoSeriale
  1978  0251                     i1l1394:	
  1979                           
  1980                           ;main.c: 329:         received = 1;
  1981  0251  01AA               	clrf	_received
  1982  0252  0AAA               	incf	_received,f
  1983  0253                     i1l1396:	
  1984                           
  1985                           ;main.c: 332:    if (INTCON&0x04)
  1986  0253  1D0B               	btfss	11,2	;volatile
  1987  0254  2A56               	goto	u74_21
  1988  0255  2A57               	goto	u74_20
  1989  0256                     u74_21:	
  1990  0256  2A6C               	goto	i1l129
  1991  0257                     u74_20:	
  1992  0257                     i1l1398:	
  1993                           
  1994                           ;main.c: 333:     {;main.c: 334:         INTCON &= ~0x04;
  1995  0257  30FB               	movlw	251
  1996  0258  00F0               	movwf	??_ISR
  1997  0259  0870               	movf	??_ISR,w
  1998  025A  058B               	andwf	11,f	;volatile
  1999  025B                     i1l1400:	
  2000                           
  2001                           ;main.c: 335:         TMR0 = 6;
  2002  025B  3006               	movlw	6
  2003  025C  0081               	movwf	1	;volatile
  2004  025D                     i1l1402:	
  2005                           
  2006                           ;main.c: 336:         count++;
  2007  025D  3001               	movlw	1
  2008  025E  07A0               	addwf	_count,f
  2009  025F  1803               	skipnc
  2010  0260  0AA1               	incf	_count+1,f
  2011  0261  3000               	movlw	0
  2012  0262  07A1               	addwf	_count+1,f
  2013                           
  2014                           ;main.c: 337:         if (count == 100)
  2015  0263  3064               	movlw	100
  2016  0264  0620               	xorwf	_count,w
  2017  0265  0421               	iorwf	_count+1,w
  2018  0266  1D03               	btfss	3,2
  2019  0267  2A69               	goto	u75_21
  2020  0268  2A6A               	goto	u75_20
  2021  0269                     u75_21:	
  2022  0269  2A6C               	goto	i1l129
  2023  026A                     u75_20:	
  2024  026A                     i1l1404:	
  2025                           
  2026                           ;main.c: 338:         {;main.c: 345:             count = 0;
  2027  026A  01A0               	clrf	_count
  2028  026B  01A1               	clrf	_count+1
  2029  026C                     i1l129:	
  2030  026C  0872               	movf	??_ISR+2,w
  2031  026D  008A               	movwf	10
  2032  026E  0E71               	swapf	(??_ISR+1)^(0+4294967168),w
  2033  026F  0083               	movwf	3
  2034  0270  0EFE               	swapf	btemp,f
  2035  0271  0E7E               	swapf	btemp,w
  2036  0272  0009               	retfie
  2037  0273                     __end_of_ISR:	
  2038  007E                     btemp	set	126	;btemp
  2039  007E                     wtemp0	set	126
  2040                           
  2041                           	psect	intentry
  2042  0004                     __pintentry:	
  2043                           ;incstack = 0
  2044                           ; Regs used in _ISR: [wreg+status,2+status,0]
  2045                           
  2046  0004                     interrupt_function:	
  2047  007E                     saved_w	set	btemp
  2048  0004  00FE               	movwf	btemp
  2049  0005  0E03               	swapf	3,w
  2050  0006  00F1               	movwf	??_ISR+1
  2051  0007  080A               	movf	10,w
  2052  0008  00F2               	movwf	??_ISR+2
  2053  0009  120A  118A  29F4   	ljmp	_ISR


Data Sizes:
    Strings     2
    Constant    0
    Data        9
    BSS         22
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMMON           14      8      11
    BANK0            80     18      46
    BANK1            80      0       0
    BANK3            96      0       0
    BANK2            96      0       0

Pointer List with Targets:

    Uart_send_string@str	PTR unsigned char  size(1) Largest target is 8
		 -> strToSend(BANK0[8]), 

    sp__num_converter	PTR unsigned char  size(1) Largest target is 4
		 -> num_converter@result(COMMON[4]), 


Critical Paths under _main in COMMON

    _main->_UART_init
    _main->_init_lcd
    _init_lcd->_send_cmd
    _Uart_send_string->_UART_TxChar
    _UART_init->___aldiv

Critical Paths under _ISR in COMMON

    None.

Critical Paths under _main in BANK0

    _main->_UART_init
    _UART_init->___aldiv

Critical Paths under _ISR in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _ISR in BANK1

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _ISR in BANK3

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _ISR in BANK2

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 3     3      0    1191
                                             16 BANK0      2     2      0
                        _UART_TxChar
                          _UART_init
                   _Uart_send_string
                            _initPic
                           _init_lcd
                           _send_cmd
 ---------------------------------------------------------------------------------
 (1) _init_lcd                                             2     2      0      22
                                              6 COMMON     2     2      0
                           _send_cmd
 ---------------------------------------------------------------------------------
 (1) _send_cmd                                             3     3      0      22
                                              3 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 (1) _initPic                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Uart_send_string                                     3     3      0     376
                                              4 COMMON     3     3      0
                        _UART_TxChar
 ---------------------------------------------------------------------------------
 (2) _UART_TxChar                                          1     1      0      22
                                              3 COMMON     1     1      0
 ---------------------------------------------------------------------------------
 (1) _UART_init                                            6     4      2     746
                                              4 COMMON     4     4      0
                                             14 BANK0      2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (2) ___aldiv                                             15     7      8     625
                                              3 COMMON     1     1      0
                                              0 BANK0     14     6      8
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 2
 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (3) _ISR                                                  3     3      0       0
                                              0 COMMON     3     3      0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 3
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _UART_TxChar
   _UART_init
     ___aldiv
   _Uart_send_string
     _UART_TxChar
   _initPic
   _init_lcd
     _send_cmd
   _send_cmd

 _ISR (ROOT)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BANK3               60      0       0       9        0.0%
BITBANK3            60      0       0       8        0.0%
SFR3                 0      0       0       4        0.0%
BITSFR3              0      0       0       4        0.0%
BANK2               60      0       0      11        0.0%
BITBANK2            60      0       0      10        0.0%
SFR2                 0      0       0       5        0.0%
BITSFR2              0      0       0       5        0.0%
BANK1               50      0       0       7        0.0%
BITBANK1            50      0       0       6        0.0%
SFR1                 0      0       0       2        0.0%
BITSFR1              0      0       0       2        0.0%
BANK0               50     12      2E       5       57.5%
BITBANK0            50      0       0       4        0.0%
SFR0                 0      0       0       1        0.0%
BITSFR0              0      0       0       1        0.0%
COMMON               E      8       B       1       78.6%
BITCOMMON            E      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
DATA                 0      0      39      12        0.0%
ABS                  0      0      39       3        0.0%
NULL                 0      0       0       0        0.0%
STACK                0      0       0       2        0.0%
EEDATA             100      0       0       0        0.0%


Microchip Technology PIC Macro Assembler V2.10 build 88905656 
Symbol Table                                                                                   Wed Jul 08 19:14:20 2020

                        pc 0002                __CFG_CP$OFF 0000                         fsr 0004  
              __CFG_LVP$ON 0000                        l156 0338                        l180 031F  
                      l343 016B                        l191 0362                        l159 035A  
                      l183 02C5                        l192 0365                        l353 01F3  
                      l186 02FF                        l189 035C                        u420 0362  
                      u421 0361               __CFG_CPD$OFF 0000                        u540 0338  
                      _ISR 01F4                        u541 0337                        u970 015E  
                      u971 015D                        u980 016F                        u981 016E  
                      u990 018E                        u991 018D                        fsr0 0004  
                      indf 0000               __CFG_FOSC$HS 0000                       ?_ISR 0070  
                     l1210 0289                       l1202 0273                       l1140 031C  
                     l1132 0301                       l1220 02B3                       l1212 0298  
                     l1204 0277                       l1142 035C                       l1134 0304  
                     l1222 02B9                       l1214 02A1                       l1206 0280  
                     l1144 0363                       l1232 0322                       l1136 0306  
                     l1224 02BF                       l1216 02A7                       l1208 0283  
                     l1234 032E                       l1226 0321                       l1138 0310  
                     l1218 02AD                       l1236 0332                       l1190 0351  
                     l1520 017A                       l1512 0157                       l1600 0091  
                     l1530 019E                       l1522 017E                       l1514 015A  
                     l1186 034C                       l1610 00A7                       l1602 0095  
                     l1540 01CC                       l1532 01A2                       l1524 0186  
                     l1516 015E                       l1188 034F                       l1620 00BA  
                     l1612 00AB                       l1604 0097                       l1542 01D5  
                     l1534 01AB                       l1526 018E                       l1518 016F  
                     l1630 00CD                       l1622 00C0                       l1614 00AC  
                     l1606 009D                       l1536 01BD                       l1528 0191  
                     l1544 01DB                       l1560 02FE                       l1552 02C6  
                     l1640 00E5                       l1632 00D1                       l1624 00C4  
                     l1616 00B0                       l1608 00A3                       l1546 01E0  
                     l1538 01CB                       l1554 02CE                       l1650 00FD  
                     l1642 00E9                       l1634 00D7                       l1626 00C8  
                     l1618 00B4                       l1570 0055                       l1562 002C  
                     l1548 01EB                       l1556 02FC                       l1660 0111  
                     l1652 0101                       l1644 00ED                       l1636 00DD  
                     l1628 00C9                       l1580 0067                       l1572 0056  
                     l1564 0047                       l1558 02FD                       l1670 0129  
                     l1662 0117                       l1654 0105                       l1646 00F1  
                     l1638 00E1                       l1590 0079                       l1582 006B  
                     l1574 0057                       l1566 004D                       l1680 013E  
                     l1672 0130                       l1664 011E                       l1656 0109  
                     l1648 00F7                       l1592 007F                       l1584 006F  
                     l1576 005B                       l1568 0051                       l1690 014A  
                     l1682 013F                       l1674 0134                       l1666 0122  
                     l1658 010D                       l1594 0085                       l1586 0073  
                     l1578 0061                       l1692 0150                       l1684 0144  
                     l1676 0135                       l1668 0123                       l1596 0089  
                     l1588 0075                       l1686 0145                       l1678 013A  
                     l1598 008D                       l1688 014A                       STR_1 0375  
                     u1010 01A2                       u1011 01A1                       u1100 013A  
                     u1005 0193                       u1101 0139                       u1030 01BD  
                     u1110 0144                       u1031 01BC                       u1111 0143  
                     u1120 014A                       u1025 01A4                       u1121 0149  
                     u1050 01DB                       u1051 01DA                       u1035 01B9  
                     u1060 01E0                       u1061 01DF                       u1045 01CD  
                     u1070 02DD                       u1080 011E                       u1137 027B  
                     u1081 011D                       u1090 0130                       u1075 02D8  
                     u1147 028D                       u1091 012F                       u1157 029C  
                     u1167 030B                       u1177 0317                       _RCIF 0065  
                     _TMR0 0001                       _TXIF 0064               __CFG_WRT$OFF 0000  
                     _main 002C                       btemp 007E              __CFG_BOREN$ON 0000  
                     start 000C                      ??_ISR 0070            __end_of___aldiv 01F4  
                    ?_main 0070              __CFG_WDTE$OFF 0000                      i1l120 0209  
                    i1l121 0223                      i1l122 023D                      i1l124 0248  
                    i1l126 024C                      i1l129 026C          Uart_send_string@i 0075  
                    _RCREG 001A                      _SPBRG 0099                      _PORTD 0008  
                    u60_20 01FA                      u60_21 01F9                      u61_20 01FF  
                    u61_21 01FE                      u70_20 0239                      u62_20 0205  
                    u70_21 0237                      u62_21 0203                      u71_20 023A  
                    u63_20 0206                      u72_20 0248                      u64_20 0214  
                    u72_21 0247                      u64_21 0213                      u73_20 024C  
                    u65_20 0219                      u73_21 024B                      u65_21 0218  
                    _TRISA 0085                      _TRISB 0086                      _TRISD 0088  
                    _TRISE 0089                      u74_20 0257                      u66_20 021F  
                    u74_21 0256                      u66_21 021D                      u75_20 026A  
                    u67_20 0220                      u75_21 0269                      u68_20 022E  
                    u68_21 022D                      u69_20 0233                      u69_21 0232  
                    _TXREG 0019                      _PicId 004A              __CFG_PWRTE$ON 0000  
           _scattoSemafori 0022         __size_of_UART_init 003A            __end_of_initPic 035B  
                    _count 0020                      _stat1 0025                      _stat2 0024  
                    _stat3 0023                      pclath 000A                      status 0003  
                    wtemp0 007E            __initialization 000F               __end_of_main 0157  
                   ??_main 0043                     _ADCON0 001F                     _ADCON1 009F  
                   _ADRESH 001E                     _ADRESL 009E                     i1l1400 025B  
                   i1l1402 025D                     i1l1404 026A                     i1l1370 01F4  
                   i1l1380 0219                     i1l1372 01FA                     i1l1382 022A  
                   i1l1374 01FF                     i1l1392 024D                     i1l1384 022E  
                   i1l1376 0210                     i1l1394 0251                     i1l1386 0233  
                   i1l1378 0214                     i1l1396 0253                     i1l1388 0244  
                   i1l1398 0257                     _INTCON 000B               ?_UART_TxChar 0070  
                ??___aldiv 0073          __end_of_UART_init 0300           __end_of_init_lcd 02C6  
         __end_of_send_cmd 0320                  ??_initPic 0073                     saved_w 007E  
__size_of_Uart_send_string 0019    __end_of__initialization 0028             __pcstackCOMMON 0070  
             __pidataBANK0 0366          num_converter@F903 0044                 __pbssBANK0 0020  
               __pmaintext 002C                 __pintentry 0004                 _contCamion 0026  
      Uart_send_string@str 0076                 __stringtab 036F                  ?_init_lcd 0070  
                ?_send_cmd 0070       __size_of_UART_TxChar 000B                    ___aldiv 0157  
                  __ptext1 0273                    __ptext2 0300                    __ptext3 034C  
                  __ptext4 0320                    __ptext5 035B                    __ptext6 02C6  
                  __ptext7 0157                    __ptext8 01F4               __size_of_ISR 007F  
                  _oldBtn1 007A                    _oldBtn2 0079                    _oldBtn3 0078  
                  _initPic 034C           ___aldiv@dividend 0037                    clrloop0 0378  
         _Uart_send_string 0320       end_of_initialization 0028                 ??_init_lcd 0076  
               ??_send_cmd 0073                  _RCSTAbits 0018           ___aldiv@quotient 003D  
                _PORTBbits 0006                  _UART_init 02C6                  _PORTEbits 0009  
                _TRISCbits 0087                  _TXSTAbits 0098                 ?_UART_init 0041  
      start_initialization 000F                __end_of_ISR 0273                 init_fetch0 0339  
              __pdataBANK0 0044    _temporizzazioneSemaforo 0048                __pbssCOMMON 0078  
                ___latbits 0002              __pcstackBANK0 0033                _datoSeriale 0029  
        __size_of_init_lcd 0053                   ?___aldiv 0033          __size_of_send_cmd 0020  
 __end_of_Uart_send_string 0339                  __pstrings 036F                ??_UART_init 0074  
                 ?_initPic 0070            ___aldiv@divisor 0033          interrupt_function 0004  
          ___aldiv@counter 003B                  clear_ram0 0377                   _PIE1bits 008C  
            ??_UART_TxChar 0073                   _GO_nDONE 00FA                  _numStrade 004C  
               _ADCON0bits 001F                __stringbase 0374                  _strToSend 002B  
          UART_TxChar@dato 0073           __size_of___aldiv 009D        __end_of_UART_TxChar 0366  
       __end_of__stringtab 0375           __size_of_initPic 000F                   _contAuto 0028  
                 _contMoto 0027                   _init_lcd 0273              __size_of_main 012B  
                 _received 002A                   _send_cmd 0300                 _INTCONbits 000B  
                 init_ram0 033D            send_cmd@command 0075                   intlevel1 0000  
        UART_init@baudrate 0041                  stringcode 036F                _UART_TxChar 035B  
        ?_Uart_send_string 0070         ??_Uart_send_string 0074                 _OPTION_REG 0081  
                 stringdir 036F                   stringtab 036F               ___aldiv@sign 003C  
